{"version":3,"sources":["component/base-component/TextInput.tsx","component/organisme/edit/dialog-common.ts","component/category/EditCategoriesComponent.tsx","utils/Pipe.ts","utils/organisme-utils.ts","simple-fr.ts","component/base-component/ConfirmDialog.tsx","component/organisme/edit/deliberation/EditDeliberationListItem.tsx","component/deliberation/CreateDeliberationDialog.tsx","constants.ts","component/base-component/AutocompleteInput.tsx","component/organisme/edit/deliberation/SelectDeliberationInput.tsx","component/organisme/edit/deliberation/AddLienDeliberationDialog.tsx","component/organisme/edit/deliberation/HeaderDeliberationsComponent.tsx","component/organisme/edit/deliberation/EditDeliberationListComponent.tsx","component/organisme/edit/DragAndDropGlobalContext.tsx","component/organisme/edit/EditNomComponent.tsx","component/base-component/SelectInput.tsx","component/organisme/edit/EditOrganismeCategoryComponent.tsx","component/organisme/edit/instance/EditInstancesComponent.tsx","component/base-component/TabsContainer.tsx","component/organisme/edit/representation/EditRepresentationDialog.tsx","component/organisme/edit/representation/EditRepresentationListItem.tsx","component/organisme/edit/representation/EditRepresentationDragListComponent.tsx","component/base-component/NumberInput.tsx","component/representant/CreateRepresentantDialog.tsx","component/organisme/edit/representation/SelectRepresentantInput.tsx","component/organisme/edit/representation/AddRepresentationDialog.tsx","component/organisme/edit/representation/HeaderRepresentationsComponent.tsx","component/organisme/edit/representation/EditRepresentationListComponent.tsx","component/base-component/SimpleForm.tsx","component/organisme/edit/instance/AddInstanceComponent.tsx","component/organisme/edit/EditOrganismeComponent.tsx","view/EditOrganismeView.tsx","component/base-component/PasswordInput.tsx","form/LoginForm.tsx","component/organisme/OrganismeComponent.tsx","form/RegisterForm.tsx","routing/routes.ts","view/EditNatureJuridiquesView.tsx","view/EditSecteursView.tsx","view/EditTypeStructuresView.tsx","view/ListOrganismesBySecteurView.tsx","view/ListOrganismesView.tsx","view/LoginView.tsx","view/OrganismeView.tsx","view/RegisterView.tsx","view/RootView.tsx","routing/ApplicationHistory.ts","services/CommandService.ts","services/CsrfTokenService.ts","services/HttpService.ts","services/NotificationService.ts","services/QueryService.ts","ApplicationContext.ts","styles/common-styles.ts","common-classes.tsx","container/Root.tsx","view/NotFoundView.tsx","routing/ApplicationRouter.tsx","index.ts","styles/vars.ts","utils/nominal-class.ts","utils.ts","state/state.ts","application-bootstrap.tsx","routing/RouteLink.tsx","form/LogoutForm.tsx","container/Menu.tsx","container/MainContainer.tsx","errors.ts"],"names":["useStyles","makeStyles","root","border","TextInput","props","classes","useState","initialValue","value","setValue","shrinkLabel","type","TextField","name","label","variant","fullWidth","autoFocus","size","onChange","e","currentTarget","onBlur","className","mode","undefined","InputProps","readOnly","InputLabelProps","shrink","multiline","dialogClasses","editBlock","css","colors","grey","clearGrey2","buttonClass","asString","clientUid","editButton","table","grey2","EditCategoryComponent","displayPopup","setDisplayPopup","category","libelle","updatedLibelle","setUpdatedLibelle","Button","startIcon","Edit","onClick","Dialog","open","onClose","DialogTitle","DialogContent","l","color","id","kind","assertUnreachable","onUpdateStatus","DialogActions","EditCategoriesComponent","live","categories","filter","c","status","archive","newCategoryLibelle","setNewCategoryLibelle","displayAddPopup","setDisplayAddPopup","Add","map","length","onAdd","pipe","Pipe","t","lambda","unwrap","this","addRepresentation","organisme","setOrganisme","representantId","organismeId","instanceId","a","appContext","commandService","addRepresentationCommand","queryService","getOrganismeQuery","then","r","representations","instances","find","i","Error","setRepresentations","onNewLienDeliberation","deliberationId","comment","addLienDeliberationCommand","organismeActions","onOrganismeNomChange","nom","updateOrganismeNomCommand","onOrganismeStatusUpdate","updateOrganismeStatus","onInstanceNomChange","updateInstanceNomCommand","onInstanceStatusChange","updateInstanceStatusCommand","onNatureJuridiqueChange","natureJuridiqueId","updateOrganismeNatureJuridiqueCommand","onSecteurChange","secteurId","updateOrganismeSecteurCommand","onTypeStructureChange","typeStructureId","updateOrganismeTypeStructureCommand","onNombreRepresentantsChange","nombre","nombreRepresentants","updateInstanceNombreRepresentantsCommand","updateOrganismeNombreRepresentantsCommand","onAddRepresentation","onMoveRepresentation","representationId","source","destination","sourceInstanceId","droppableId","fromSourceRepresentations","movedRepresentation","sourceRepresentations","toInstanceId","destinationRepresentation","splice","index","o","moveRepresentationCommand","toOrganismeId","toPosition","onAddInstance","nomInstance","addInstanceCommand","instance","lienDeliberations","addInstance","formatLocaleDate","parts","split","Errors","_41dcf9d3","ConfirmDialog","display","title","message","confirmButtonColor","onConfirm","confirmButtonLabel","actionsClass","EditDeliberationListItem","displayDeleteDialog","setDisplayDeleteDialog","editCommonClasses","lienDeliberation","deliberation","deliberationDate","Delete","log","CreateDeliberationDialog","dialogLoading","setDialogLoading","dateMandatory","setDateMandatory","setLibelle","useEffect","setDeliberationDate","close","date","stringToLocalDate","errorRed","disabled","createDeliberationCommand","onNewDeliberation","CircularProgress","SharedConstants","AutocompleteInput","selection","suggestions","setSuggestions","alreadySet","setAlreadySet","Autocomplete","onInputChange","event","newValue","onCreate","onSelect","getOptionLabel","option","suggestionLabel","selectOnFocus","clearOnBlur","handleHomeEndKeys","freeSolo","options","renderOption","renderProps","s","React","renderSuggestion","renderInput","params","white","alreadySetLabel","SelectDeliberationInput","input","searchDeliberationQuery","searchToken","results","excludeDeliberations","includes","proposeNew","Promise","resolve","d","AddLienDeliberationDialog","selectedDeliberation","setSelectedDeliberation","displayCreateDeliberationDialog","setDisplayCreateDeliberationDialog","createDeliberationLibelle","setCreateDeliberationLibelle","setComment","delibMandatory","setDelibMandatory","submitting","setSubmitting","HeaderDeliberationsComponent","displayDialog","setDisplayDialog","EditDeliberationListComponent","columnPadding","DragAndDropGlobalContext","onDragEnd","rawEvent","draggableId","children","editClass","EditNomComponent","setNom","titleElement","onUpdateNom","theme","formControl","margin","spacing","selectEmpty","marginTop","SelectInput","inputId","textValue","setTextValue","FormControl","Select","labelId","target","displayEmpty","MenuItem","EditOrganismeCategoryComponent","categoryList","unshift","toLowerCase","clearGrey","currentId","EditOrganismeNatureJuridiqueComponent","useRecoilValue","state","natureJuridiques","categoryById","natureJuridiquesById","EditOrganismeSecteurComponent","secteurs","secteursById","EditOrganismeTypeStructureComponent","typeStructures","typeStructuresById","InstanceDragDropZone","EditInstancesComponent","provided","snapshot","ref","innerRef","droppableProps","isDraggingOver","lightblue","providedDraggable","snapshotDraggable","draggableProps","isDragging","dragableMoving","dragHandleProps","onNomChange","onStatusChange","organismeOrInstanceId","placeholder","TabPanel","TabsContainer","tabs","Array","from","labels","n","containerValue","setContainerValue","Box","sx","width","borderBottom","borderColor","Tabs","Tab","_","p","RepresentationPanel","representation","suppleance","DemissionPanel","suppleantDecision","setSuppleantDecision","RadioGroup","FormControlLabel","control","Radio","DemisssionSuppleantPanel","SuppressionPanel","EditRepresentationDiaglog","maxWidth","EditRepresentationListItem","displayEditPopup","setDisplayEditPopup","DragHandle","representant","prenom","RepresentantDragDropZone","EditRepresentationDragListComponent","NumberInput","v","parseInt","extractPrenomNom","nomComplet","shift","join","CreateRepresentantDialog","extract","setPrenom","createRepresentantCommand","isElu","civilite","onNewRepresentant","SelectRepresentantInput","searchRepresentantsQuery","representants","AddRepresentationDialog","selectedRepresentant","setSelectedRepresentant","selectedSuppleant","setSelectedSuppleant","displayCreateRepresentantDialog","setDisplayCreateRepresentantDialog","createRepresentantNom","setCreateRepresentantNom","representantMandatory","setRepresentantMandatory","numberBlock","HeaderRepresentationsComponent","displayAddRepresentantionDialog","setDisplayAddRepresentantionDialog","EditRepresentationListComponent","SimpleForm","forwardRef","onSubmit","preventDefault","stopPropagation","form","dto","elements","forEach","HTMLInputElement","AddInstanceComponent","formRef","useRef","dimensions","screenSmMin","separator","column","RepresentantsDeliberationsBlock","EditOrganismeComponent","actions","displayLoading","loading","PasswordInput","showPassword","setShowPassword","InputLabel","htmlFor","OutlinedInput","endAdornment","InputAdornment","position","IconButton","onMouseDown","edge","Visibility","VisibilityOff","LoginForm","password","setPassword","login","OrganismeComponent","RegisterForm","mailIsAlreadyTaken","setMailIsAlreadyTaken","checkLoginAvailability","isLoginAlreadyTakenQuery","alreadyTaken","mail","displayName","routes","EditNatureJuridiquesRoute","path","component","useRecoilState","setNatureJuridiques","MainContainer","createNatureJuridiqueCommand","newNatureJuridique","sort","compareByString","_c0c89407","updateNatureJuridiqueLibelleCommand","updateNatureJuridiqueStatusCommand","role","EditOrganismeRoute","setLoading","exec","routeParams","catch","RouteLink","route","ArrowBackIos","fontSize","EditSecteursRoute","setSecteurs","createSecteurCommand","newSecteur","updateSecteurLibelleCommand","updateSecteurStatusCommand","EditTypeStructuresRoute","setTypeStructures","createTypeStructureCommand","newTypeStructure","updateTypeStructureLibelleCommand","updateTypeStructureStatusCommand","ListOrganismesBySecteurRoute","organismes","setOrganismes","secteurById","secteur","getValue","listOrganismesBySecteurQuery","createOrganismeCommand","applicationHistory","goTo","ListOrganismesRoute","listOrganismesQuery","LoginRoute","userInfos","setUserInfos","loginResult","setLoginResult","data","loginCommand","result","userinfos","_198c103e","csrfTokenService","refreshToken","bootstrapData","env","OrganismeRoute","RegisterRoute","registerResult","setRegisterResult","registerInput","registerCommand","_db434940","RootRoute","ApplicationHistory","_browserHistory","history","push","buildPath","replace","Object","keys","k","param","indexOf","CommandService","command","updateOrganismePartageRepresentantsCommand","updateRepresentationStatusCommand","commandName","httpService","post","objectType","body","CsrfTokenService","header","inputName","token","getCookie","_166ac42d","HttpService","credentials","get","url","getParams","fetchAndDeserialize","bodyObject","JSON","stringify","requestType","bodyAsString","method","headers","Accept","finalUrl","encodeURIComponent","fetch","response","ok","text","parse","error","reject","NotificationService","notifications","displayNotification","toast","QueryService","query","queryName","csrfTokenServiceInstance","httpServiceInstance","notificationServiceInstance","notificationService","applicationHistoryInstance","queryServiceInstance","commandServiceInstance","globalStyles","fonts","font","cleanScrollBar","Root","height","setHeight","handleResize","window","innerHeight","addEventListener","removeEventListener","useWindowHeight","NotFoundView","ApplicationRouter","browserHistory","entries","entry","exact","render","routerProps","roles","match","to","pathname","location","dragHandlers","errorBackground","popupGlasspanel","instanciateNominalString","dict","pairs","pair","key","x","uniqueIdIndex","cookieName","ca","document","cookie","charAt","substring","o1","o2","localeCompare","_ff7e63f5","atom","default","selector","organismeCategories","global","logged","console","muiTheme","createTheme","typography","ReactDOM","styles","injectFirst","getElementById","Styled","forwardCss","styled","Link","LogoutForm","logoutForm","isLoggingOut","logout","submit","action","PureComponent","Menu","_6f643a2a","_82c7652b","_06c0f351","_2c740dc6","_bf153d36","_51237480","_952f03ee","_89de521f","_52b81c0f","_a5ef6b39"],"mappings":"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","file":"static/js/main.a802adf7.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport * as React from 'react';\nimport { ChangeEvent, FocusEvent, useState } from 'react';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        border: 0\n      }\n    }\n  }\n}));\n\nexport const TextInput = (props: {\n  name: string;\n  label?: string;\n  initialValue?: string;\n  autoFocus?: boolean;\n  type?: React.InputHTMLAttributes<unknown>['type'];\n  // TODO not directly value because of forms ?\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void;\n  onBlur?: (event: FocusEvent<HTMLInputElement>) => void;\n  mode?: 'normal' | 'appears-as-text';\n  multiline?: boolean;\n}) => {\n  const classes = useStyles();\n  const [value, setValue] = useState(props.initialValue ?? ''); // ?? '' is needed for type=date\n  // label always on top (avec date sinon se superpose avec masque)\n  const shrinkLabel = props.type === 'date';\n  return (\n    <TextField\n      name={props.name}\n      label={props.label}\n      variant=\"outlined\"\n      value={value}\n      fullWidth={true}\n      autoFocus={props.autoFocus}\n      size={'small'}\n      type={props.type}\n      onChange={(e: ChangeEvent<HTMLInputElement>) => {\n        setValue(e.currentTarget.value);\n        if (props.onChange) {\n          props.onChange(e);\n        }\n      }}\n      onBlur={props.onBlur}\n      className={props.mode === 'appears-as-text' ? classes.root : undefined}\n      InputProps={{\n        readOnly: props.mode === 'appears-as-text'\n      }}\n      InputLabelProps={shrinkLabel ? { shrink: true } : undefined}\n      multiline={props.multiline ?? false}\n    />\n  );\n};\n","import { css } from '@emotion/react';\nimport { colors } from '../../../styles/vars';\n\nexport const dialogClasses = {\n  // TODO remove !\n  editBlock: css`\n    h3 {\n      font-size: 1.2rem;\n      padding: 20px 0 10px 0;\n    }\n    padding: 0 0 10px 0;\n    border: 0;\n    &:not(:first-of-type) {\n      padding-top: 10px;\n      //border-top: 1px dashed ${colors.grey};\n    }\n    // &:nth-child(2) {\n    //   background: ${colors.clearGrey2};\n    // }\n  `\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Add, Edit } from '@mui/icons-material';\nimport { DialogContent, DialogTitle } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { Category, CategoryId } from '../../domain/bootstrap-data';\nimport { ItemStatus } from '../../domain/organisme';\nimport { colors } from '../../styles/vars';\nimport { assertUnreachable, clientUid } from '../../utils';\nimport { asString, NominalString } from '../../utils/nominal-class';\nimport { TextInput } from '../base-component/TextInput';\nimport { dialogClasses } from '../organisme/edit/dialog-common';\n\nconst buttonClass = asString(clientUid());\n\nexport const classes = {\n  editButton: css`\n    padding-top: 10px;\n    display: flex;\n    justify-content: flex-end;\n    gap: 10px;\n  `,\n  table: css`\n    border-spacing: 0;\n\n    thead {\n      td {\n        padding: 10px 20px;\n      }\n    }\n\n    tbody {\n      tr {\n        .${buttonClass} {\n          visibility: hidden;\n        }\n\n        &:hover {\n          .${buttonClass} {\n            visibility: visible;\n          }\n        }\n        &:nth-of-type(2n) {\n          background-color: ${colors.clearGrey2};\n        }\n        &:not(:first-of-type) {\n          td {\n            border-top: 1px solid ${colors.grey2};\n          }\n        }\n      }\n\n      td {\n        padding: 6px 20px;\n      }\n    }\n  `\n};\n\nconst EditCategoryComponent = (props: {\n  kind: 'secteur' | 'typeStructure' | 'natureJuridique';\n  category: Category;\n  onChange: (id: CategoryId, libelle: string, then: () => void) => void;\n  onUpdateStatus: (\n    id: CategoryId,\n    status: ItemStatus,\n    then: () => void\n  ) => void;\n}) => {\n  const [displayPopup, setDisplayPopup] = useState(false);\n  const [updatedLibelle, setUpdatedLibelle] = useState(props.category.libelle);\n  return (\n    <React.Fragment>\n      <tr>\n        <td\n          css={css`\n            width: 500px;\n          `}\n        >\n          {props.category.libelle}\n        </td>\n        <td>\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            css={css`\n              background: white;\n            `}\n            className={buttonClass}\n            startIcon={<Edit />}\n            onClick={() => setDisplayPopup(true)}\n          >\n            Éditer\n          </Button>\n        </td>\n        <Dialog open={displayPopup} onClose={() => setDisplayPopup(false)}>\n          <DialogTitle>Édition</DialogTitle>\n          <DialogContent>\n            <div css={dialogClasses.editBlock}>\n              <h3>Éditer libelle</h3>\n              <TextInput\n                name=\"libelle\"\n                initialValue={props.category.libelle}\n                onChange={l => setUpdatedLibelle(l.currentTarget.value)}\n              />\n              <div css={classes.editButton}>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"small\"\n                  onClick={() =>\n                    props.onChange(props.category.id, updatedLibelle, () =>\n                      setDisplayPopup(false)\n                    )\n                  }\n                >\n                  Enregistrer\n                </Button>\n              </div>\n            </div>\n            <div css={dialogClasses.editBlock}>\n              <h3>Archivage</h3>\n              {(() => {\n                switch (props.kind) {\n                  case 'secteur':\n                    return 'Le secteur';\n                  case 'typeStructure':\n                    return 'Le type de structure';\n                  case 'natureJuridique':\n                    return 'La nature juridique';\n                  default:\n                    assertUnreachable(props.kind);\n                }\n              })()}{' '}\n              pourra être{' '}\n              {(() => {\n                switch (props.kind) {\n                  case 'secteur':\n                  case 'typeStructure':\n                    return 'retrouvé';\n                  case 'natureJuridique':\n                    return 'retrouvée';\n                  default:\n                    assertUnreachable(props.kind);\n                }\n              })()}{' '}\n              dans les archives. Si un organisme non archivé est encore\n              référencé dans{' '}\n              {(() => {\n                switch (props.kind) {\n                  case 'secteur':\n                    return 'le secteur';\n                  case 'typeStructure':\n                    return 'le type de structure';\n                  case 'natureJuridique':\n                    return 'la nature juridique';\n                  default:\n                    assertUnreachable(props.kind);\n                }\n              })()}\n              , une incohérence sera remontée.\n              <div css={classes.editButton}>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"warning\"\n                  size=\"small\"\n                  onClick={() =>\n                    props.onUpdateStatus(props.category.id, 'archive', () =>\n                      setDisplayPopup(false)\n                    )\n                  }\n                >\n                  Archiver\n                </Button>\n              </div>\n            </div>\n            <div css={dialogClasses.editBlock}>\n              <h3>Suppression</h3>À utiliser en cas d'<b>erreur de saisie</b>{' '}\n              uniquement. Si un organisme est encore référencé dans{' '}\n              {(() => {\n                switch (props.kind) {\n                  case 'secteur':\n                    return 'le secteur';\n                  case 'typeStructure':\n                    return 'le type de structure';\n                  case 'natureJuridique':\n                    return 'la nature juridique';\n                  default:\n                    assertUnreachable(props.kind);\n                }\n              })()}\n              , une incohérence sera remontée.\n              <div css={classes.editButton}>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"error\"\n                  size=\"small\"\n                  onClick={() =>\n                    props.onUpdateStatus(props.category.id, 'trash', () =>\n                      setDisplayPopup(false)\n                    )\n                  }\n                >\n                  Supprimer\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setDisplayPopup(false)} color=\"primary\">\n              Annuler\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </tr>\n    </React.Fragment>\n  );\n};\n\nexport const EditCategoriesComponent = (props: {\n  kind: 'secteur' | 'typeStructure' | 'natureJuridique';\n  categories: Category[];\n  onAdd: (libelle: string, then: () => void) => void;\n  onChange: (id: NominalString<any>, libelle: string, then: () => void) => void;\n  onUpdateStatus: (\n    id: NominalString<any>,\n    status: ItemStatus,\n    then: () => void\n  ) => void;\n}) => {\n  const live = props.categories.filter(c => c.status === 'live');\n  const archive = props.categories.filter(c => c.status === 'archive');\n  const [newCategoryLibelle, setNewCategoryLibelle] = useState('');\n  const [displayAddPopup, setDisplayAddPopup] = useState(false);\n  return (\n    <React.Fragment>\n      <Button\n        variant=\"outlined\"\n        size=\"small\"\n        css={css`\n          background: white;\n        `}\n        startIcon={<Add />}\n        onClick={() => setDisplayAddPopup(true)}\n      >\n        Ajouter\n      </Button>\n      <table css={classes.table}>\n        <tbody>\n          {live.map(c => (\n            <EditCategoryComponent\n              key={asString(c.id)}\n              kind={props.kind}\n              category={c}\n              onChange={props.onChange}\n              onUpdateStatus={props.onUpdateStatus}\n            />\n          ))}\n        </tbody>\n      </table>\n      {archive.length !== 0 && (\n        <React.Fragment>\n          <div\n            css={css`\n              margin: 20px 0;\n            `}\n          >\n            <h3>Archives</h3>\n          </div>\n          <table css={classes.table}>\n            <tbody>\n              {archive.map(c => (\n                <EditCategoryComponent\n                  key={asString(c.id)}\n                  kind={props.kind}\n                  category={c}\n                  onChange={props.onChange}\n                  onUpdateStatus={props.onUpdateStatus}\n                />\n              ))}\n            </tbody>\n          </table>\n        </React.Fragment>\n      )}\n      <Dialog open={displayAddPopup} onClose={() => setDisplayAddPopup(false)}>\n        <DialogTitle>Ajouter</DialogTitle>\n        <DialogContent>\n          <div css={dialogClasses.editBlock}>\n            <h3>Libelle</h3>\n            <TextInput\n              name=\"libelle\"\n              initialValue={newCategoryLibelle}\n              onChange={l => setNewCategoryLibelle(l.currentTarget.value)}\n            />\n            <div css={classes.editButton}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n                onClick={() =>\n                  props.onAdd(newCategoryLibelle, () =>\n                    setDisplayAddPopup(false)\n                  )\n                }\n              >\n                Ajouter\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDisplayAddPopup(false)} color=\"primary\">\n            Annuler\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n};\n","export const pipe = <T>(value: T) => new Pipe(value);\n\nexport class Pipe<T> {\n  private t: T;\n\n  constructor(t: T) {\n    this.t = t;\n  }\n\n  // map = <U>(lambda: (t: T, ...l: any) => U, ...p: any): Pipe<U> => new Pipe(lambda(this.t, p));\n  // .map(replaceAll, '<mj-fragment>', '')\n  map = <U>(lambda: (t: T) => U): Pipe<U> => new Pipe(lambda(this.t));\n\n  unwrap = () => this.t;\n}\n","import { appContext } from '../ApplicationContext';\nimport { DropDestination } from '../component/organisme/edit/DragAndDropGlobalContext';\nimport {\n  DeliberationId,\n  InstanceId,\n  NatureJuridiqueId,\n  OrganismeId,\n  RepresentantId,\n  RepresentationId,\n  SecteurId,\n  TypeStructureId\n} from '../domain/ids';\nimport {\n  InstanceDto,\n  ItemStatus,\n  OrganismeDto,\n  RepresentationDto\n} from '../domain/organisme';\nimport { pipe } from './Pipe';\n\n// TODO naming utils, actions...\n\nconst onOrganismeNomChange = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  nom: string,\n  then: () => void\n) => {\n  appContext\n    .commandService()\n    .updateOrganismeNomCommand({\n      id: organisme.id,\n      nom\n    })\n    .then(() => {\n      setOrganisme({ ...organisme, nom });\n      then();\n    });\n};\n\nconst onOrganismeStatusUpdate = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  status: ItemStatus,\n  then: () => void\n) => {\n  appContext\n    .commandService()\n    .updateOrganismeStatus({\n      id: organisme.id,\n      status\n    })\n    .then(() => {\n      setOrganisme({ ...organisme, status });\n      then();\n    });\n};\n\nconst onInstanceNomChange = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  instanceId: InstanceId,\n  nom: string,\n  then: () => void\n) => {\n  appContext\n    .commandService()\n    .updateInstanceNomCommand({\n      id: instanceId,\n      nom\n    })\n    .then(() => {\n      const instances = organisme.instances.map(i => {\n        if (i.id === instanceId) {\n          return { ...i, nom };\n        } else {\n          return i;\n        }\n      });\n      setOrganisme({ ...organisme, instances });\n      then();\n    });\n};\n\nconst onInstanceStatusChange = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  instanceId: InstanceId,\n  status: ItemStatus,\n  then: () => void\n) => {\n  appContext\n    .commandService()\n    .updateInstanceStatusCommand({\n      id: instanceId,\n      status\n    })\n    .then(() => {\n      const instances = organisme.instances.map(i => {\n        if (i.id === instanceId) {\n          return { ...i, status };\n        } else {\n          return i;\n        }\n      });\n      setOrganisme({ ...organisme, instances });\n      then();\n    });\n};\n\nconst onNatureJuridiqueChange = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  natureJuridiqueId: NatureJuridiqueId | undefined\n) => {\n  setOrganisme({ ...organisme, natureJuridiqueId });\n  appContext.commandService().updateOrganismeNatureJuridiqueCommand({\n    id: organisme.id,\n    natureJuridiqueId\n  });\n};\n\nconst onSecteurChange = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  secteurId: SecteurId | undefined\n) => {\n  setOrganisme({ ...organisme, secteurId });\n  appContext.commandService().updateOrganismeSecteurCommand({\n    id: organisme.id,\n    secteurId: secteurId\n  });\n};\n\nconst onTypeStructureChange = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  typeStructureId: TypeStructureId | undefined\n) => {\n  setOrganisme({ ...organisme, typeStructureId });\n  appContext.commandService().updateOrganismeTypeStructureCommand({\n    id: organisme.id,\n    typeStructureId: typeStructureId\n  });\n};\n\nconst onNombreRepresentantsChange = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  instanceId: InstanceId | undefined,\n  nombre: number | undefined\n) => {\n  if (!instanceId) {\n    setOrganisme({ ...organisme, nombreRepresentants: nombre });\n    appContext.commandService().updateOrganismeNombreRepresentantsCommand({\n      id: organisme.id,\n      nombre\n    });\n  } else {\n    const instances = organisme.instances.map(i => {\n      if (i.id === instanceId) {\n        return { ...i, nombreRepresentants: nombre };\n      } else {\n        return i;\n      }\n    });\n    setOrganisme({ ...organisme, instances });\n    appContext.commandService().updateInstanceNombreRepresentantsCommand({\n      instanceId,\n      nombre\n    });\n  }\n};\n\nconst addRepresentation = async (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  representantId: RepresentantId,\n  organismeId: OrganismeId,\n  instanceId: InstanceId | undefined\n) => {\n  await appContext.commandService().addRepresentationCommand({\n    representantId,\n    organismeId,\n    instanceId\n  });\n  // .then(r => {\n  //   const representation: RepresentationDto = {\n  //     id: r.id,\n  //     representant\n  //   };\n  //   // FIXME\n  //   if (!instanceId) {\n  //     const representations = [...organisme.representations, representation];\n  //     setOrganisme({ ...organisme, representations });\n  //   }\n  // });\n  // TODO faire mieux ? (penser virer le async)\n  return appContext\n    .queryService()\n    .getOrganismeQuery({\n      id: organisme.id\n    })\n    .then(r => setOrganisme(r.organisme));\n};\n\nconst representations = (\n  organisme: OrganismeDto,\n  instanceId: InstanceId | undefined\n) =>\n  pipe(\n    instanceId ? organisme.instances.find(i => i.id === instanceId) : organisme\n  )\n    .map(i => {\n      if (!i) {\n        throw Error(`${organisme.id} ${instanceId}`);\n      }\n      return i.representations;\n    })\n    .unwrap();\n\nconst setRepresentations = (\n  organisme: OrganismeDto,\n  instanceId: InstanceId | undefined,\n  representations: RepresentationDto[]\n) => {\n  if (!instanceId) {\n    return { ...organisme, representations };\n  } else {\n    const instances = organisme.instances.map(i => {\n      if (i.id === instanceId) {\n        return { ...i, representations };\n      } else {\n        return i;\n      }\n    });\n    return { ...organisme, instances };\n  }\n};\n\nconst onMoveRepresentation = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  representationId: RepresentationId,\n  source: DropDestination<OrganismeId | InstanceId>,\n  destination?: DropDestination<OrganismeId | InstanceId>\n) => {\n  if (!destination) {\n    return;\n  }\n  const sourceInstanceId =\n    source.droppableId !== organisme.id\n      ? (source.droppableId as InstanceId)\n      : undefined;\n  const fromSourceRepresentations = representations(\n    organisme,\n    sourceInstanceId\n  );\n  const movedRepresentation = fromSourceRepresentations.find(\n    r => r.id === representationId\n  );\n  if (!movedRepresentation) {\n    throw Error(`${representationId}`);\n  }\n  const sourceRepresentations = fromSourceRepresentations.filter(\n    r => r.id !== representationId\n  );\n  const toInstanceId =\n    destination.droppableId !== organisme.id\n      ? (destination.droppableId as InstanceId)\n      : undefined;\n  const destinationRepresentation = [\n    ...representations(organisme, toInstanceId)\n  ].filter(r => r.id !== movedRepresentation.id);\n  destinationRepresentation.splice(destination.index, 0, movedRepresentation);\n  setOrganisme(\n    pipe(organisme)\n      .map(o => setRepresentations(o, sourceInstanceId, sourceRepresentations))\n      .map(o => setRepresentations(o, toInstanceId, destinationRepresentation))\n      .unwrap()\n  );\n  appContext\n    .commandService()\n    .moveRepresentationCommand({\n      id: representationId,\n      toOrganismeId: organisme.id,\n      toInstanceId,\n      toPosition: destination.index\n    })\n    .then(() => {});\n};\n\nconst addInstance = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  nomInstance: string\n) => {\n  appContext\n    .commandService()\n    .addInstanceCommand({ nomInstance, organismeId: organisme.id })\n    .then(r => {\n      const instance: InstanceDto = {\n        id: r.id,\n        nom: nomInstance,\n        nombreRepresentants: undefined,\n        lienDeliberations: [],\n        representations: [],\n        status: 'live'\n      };\n      setOrganisme({\n        ...organisme,\n        instances: [...organisme.instances, instance]\n      });\n    });\n};\n\nconst onNewLienDeliberation = async (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void,\n  instanceId: InstanceId | undefined,\n  deliberationId: DeliberationId,\n  comment: string | undefined\n): Promise<void> => {\n  await appContext.commandService().addLienDeliberationCommand({\n    organismeId: organisme.id,\n    instanceId,\n    deliberationId,\n    comment\n  });\n  // plus simple parce qu'on a pas le DeliberationDto pour reconstituer le LienDeliberationDto\n  // TODO faire mieux ? (penser virer le async)\n  return appContext\n    .queryService()\n    .getOrganismeQuery({\n      id: organisme.id\n    })\n    .then(r => setOrganisme(r.organisme));\n};\n\nexport const organismeActions = (\n  organisme: OrganismeDto,\n  setOrganisme: (o: OrganismeDto) => void\n) => ({\n  onOrganismeNomChange: (nom: string, then: () => void) =>\n    onOrganismeNomChange(organisme, setOrganisme, nom, then),\n  onOrganismeStatusUpdate: (status: ItemStatus, then: () => void) =>\n    onOrganismeStatusUpdate(organisme, setOrganisme, status, then),\n  onInstanceNomChange: (\n    instanceId: InstanceId,\n    nom: string,\n    then: () => void\n  ) => onInstanceNomChange(organisme, setOrganisme, instanceId, nom, then),\n  onInstanceStatusChange: (\n    instanceId: InstanceId,\n    status: ItemStatus,\n    then: () => void\n  ) =>\n    onInstanceStatusChange(organisme, setOrganisme, instanceId, status, then),\n  onNatureJuridiqueChange: (natureJuridiqueId: NatureJuridiqueId | undefined) =>\n    onNatureJuridiqueChange(organisme, setOrganisme, natureJuridiqueId),\n  onSecteurChange: (secteurId: SecteurId | undefined) =>\n    onSecteurChange(organisme, setOrganisme, secteurId),\n  onTypeStructureChange: (typeStructureId: TypeStructureId | undefined) =>\n    onTypeStructureChange(organisme, setOrganisme, typeStructureId),\n  onNombreRepresentantsChange: (\n    instanceId: InstanceId | undefined,\n    nombre: number | undefined\n  ) => onNombreRepresentantsChange(organisme, setOrganisme, instanceId, nombre),\n  onAddRepresentation: (\n    representantId: RepresentantId,\n    organismeId: OrganismeId,\n    instanceId: InstanceId | undefined\n  ) =>\n    addRepresentation(\n      organisme,\n      setOrganisme,\n      representantId,\n      organismeId,\n      instanceId\n    ),\n  onMoveRepresentation: (\n    representationId: RepresentationId,\n    source: DropDestination<OrganismeId | InstanceId>,\n    destination?: DropDestination<OrganismeId | InstanceId>\n  ) =>\n    onMoveRepresentation(\n      organisme,\n      setOrganisme,\n      representationId,\n      source,\n      destination\n    ),\n  onAddInstance: (nom: string) => addInstance(organisme, setOrganisme, nom),\n  onNewLienDeliberation: (\n    instanceId: InstanceId | undefined,\n    deliberationId: DeliberationId,\n    comment: string | undefined\n  ) =>\n    onNewLienDeliberation(\n      organisme,\n      setOrganisme,\n      instanceId,\n      deliberationId,\n      comment\n    )\n});\n","import { LocalDate } from './domain/time';\nimport { Errors } from './errors';\nimport { asString } from './utils/nominal-class';\n\nexport const formatLocaleDate = (value: LocalDate) => {\n  const parts = asString(value).split('-');\n  if (parts.length !== 3) {\n    throw Errors._41dcf9d3();\n  }\n  return `${parts[2]}/${parts[1]}/${parts[0]}`;\n};\n","/** @jsxImportSource @emotion/react */\nimport {\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@mui/material';\nimport Button from '@mui/material/Button';\nimport { ButtonTypeMap } from '@mui/material/Button/Button';\nimport * as React from 'react';\n\nexport const ConfirmDialog = (props: {\n  title: string;\n  message: string;\n  confirmButtonLabel: string;\n  confirmButtonColor: ButtonTypeMap['props']['color'];\n  display: boolean;\n  onConfirm: () => void;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog open={props.display} onClose={props.onClose} fullWidth={true}>\n      <DialogTitle>{props.title}</DialogTitle>\n      <DialogContent>\n        <div>{props.message}</div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.onClose} color=\"primary\">\n          Annuler\n        </Button>\n        <div>\n          <Button\n            variant=\"contained\"\n            color={props.confirmButtonColor}\n            onClick={props.onConfirm}\n          >\n            {props.confirmButtonLabel}\n          </Button>\n        </div>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Delete } from '@mui/icons-material';\nimport { Button } from '@mui/material';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { LienDeliberationDto } from '../../../../domain/organisme';\nimport { formatLocaleDate } from '../../../../simple-fr';\nimport { colors } from '../../../../styles/vars';\nimport { clientUid } from '../../../../utils';\nimport { asString } from '../../../../utils/nominal-class';\nimport { ConfirmDialog } from '../../../base-component/ConfirmDialog';\nimport { editCommonClasses } from '../EditOrganismeComponent';\n\nconst actionsClass = asString(clientUid());\n\nexport const EditDeliberationListItem = (props: {\n  lienDeliberation: LienDeliberationDto;\n}) => {\n  const [displayDeleteDialog, setDisplayDeleteDialog] = useState(false);\n  return (\n    <div\n      key={asString(props.lienDeliberation.id)}\n      css={css`\n        user-select: none;\n        padding: 10px 20px;\n        ${editCommonClasses.border};\n        margin-top: 4px;\n        &:first-of-type {\n          margin-top: 0;\n        }\n        background: ${colors.clearGrey2};\n      `}\n    >\n      <div\n        css={css`\n          margin: 12px 4px;\n          display: flex;\n          align-items: center;\n          .${actionsClass} {\n            visibility: hidden;\n          }\n          &:hover {\n            .${actionsClass} {\n              visibility: visible;\n            }\n          }\n        `}\n      >\n        <div>\n          {props.lienDeliberation.deliberation.libelle} du{' '}\n          {formatLocaleDate(\n            props.lienDeliberation.deliberation.deliberationDate\n          )}\n          {props.lienDeliberation.comment && (\n            <div\n              css={css`\n                font-size: 0.8rem;\n                color: ${colors.grey};\n                padding: 10px;\n              `}\n            >\n              {props.lienDeliberation.comment}\n            </div>\n          )}\n        </div>\n        <div\n          css={css`\n            flex: 1;\n          `}\n        />\n        <div\n          css={css`\n            margin-left: 20px;\n            display: flex;\n          `}\n          className={actionsClass}\n        >\n          <div\n            css={css`\n              margin-left: 10px;\n            `}\n          >\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              color={'error'}\n              css={css`\n                background: white;\n              `}\n              startIcon={<Delete />}\n              onClick={() => setDisplayDeleteDialog(true)}\n            >\n              Supprimer\n            </Button>\n            <ConfirmDialog\n              title={\n                'Êtes-vous sûr de vouloir supprimer le lien à la délibération ?'\n              }\n              message=\"La suppression est définitive et sert à corriger les erreurs de saisie uniquement.\"\n              confirmButtonLabel={'Supprimer'}\n              confirmButtonColor=\"error\"\n              display={displayDeleteDialog}\n              onConfirm={() => {\n                log('delete');\n                // appContext.commandService().delete\n              }}\n              onClose={() => setDisplayDeleteDialog(false)}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, DialogTitle } from '@mui/material';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { appContext } from '../../ApplicationContext';\nimport { DeliberationDto } from '../../domain/organisme';\nimport { LocalDate } from '../../domain/time';\nimport { colors } from '../../styles/vars';\nimport { stringToLocalDate } from '../../utils';\nimport { TextInput } from '../base-component/TextInput';\n\nexport const CreateDeliberationDialog = (props: {\n  libelle: string;\n  display: boolean;\n  close: () => void;\n  onNewDeliberation: (deliberation: DeliberationDto) => void;\n}) => {\n  const [dialogLoading, setDialogLoading] = useState(false);\n  const [dateMandatory, setDateMandatory] = useState(false);\n  // libelle & deliberationDate because TextInput type=date doesn't seem to work with SimpleForm\n  const [libelle, setLibelle] = useState(props.libelle);\n  useEffect(() => setLibelle(props.libelle), [props.libelle]);\n  const [deliberationDate, setDeliberationDate] = useState<\n    LocalDate | undefined\n  >(undefined);\n  const onSubmit = () => {\n    if (!deliberationDate) {\n      setDateMandatory(true);\n      return;\n    }\n    setDialogLoading(true);\n    setDateMandatory(false);\n    appContext\n      .commandService()\n      .createDeliberationCommand({\n        libelle,\n        deliberationDate\n      })\n      .then(r => {\n        setDialogLoading(false);\n        const deliberation: DeliberationDto = {\n          id: r.deliberationId,\n          libelle,\n          deliberationDate\n        };\n        props.onNewDeliberation(deliberation);\n        props.close();\n      });\n  };\n  return (\n    <Dialog open={props.display} onClose={props.close} fullWidth={true}>\n      <DialogTitle>Ajouter nouvelle délibération</DialogTitle>\n      <DialogContent>\n        <div\n          css={css`\n            margin: 10px 0;\n          `}\n        >\n          <TextInput\n            name=\"libelle\"\n            label=\"Libellé\"\n            initialValue={libelle}\n            onChange={e => setLibelle(e.currentTarget.value)}\n          />\n          <div\n            css={css`\n              padding-top: 20px;\n            `}\n          >\n            <TextInput\n              name=\"deliberationDate\"\n              label=\"Date de délibération\"\n              type=\"date\"\n              onChange={e => {\n                const date = stringToLocalDate(e.currentTarget.value);\n                setDeliberationDate(date);\n              }}\n            />\n            {dateMandatory && (\n              <div\n                css={css`\n                  color: ${colors.errorRed};\n                  font-weight: bold;\n                `}\n              >\n                La date est obligatoire\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.close} color=\"primary\">\n          Annuler\n        </Button>\n        <div>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={dialogLoading}\n            onClick={onSubmit}\n          >\n            Ajouter\n          </Button>\n          {dialogLoading && (\n            <div\n              css={css`\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                margin-top: -12px;\n                margin-left: -12px;\n              `}\n            >\n              <CircularProgress size={24} />\n            </div>\n          )}\n        </div>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","export const SharedConstants = {\n  searchLengthLimit: 2\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Autocomplete } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport * as React from 'react';\nimport { ChangeEvent, useEffect, useState } from 'react';\nimport { colors } from '../../styles/vars';\n\nexport type AlreadySet = boolean;\n\nexport const AutocompleteInput = <Suggestion extends object>(props: {\n  selection: Suggestion | undefined;\n  label: string;\n  alreadySetLabel?: string;\n  onInputChange: (\n    input: string\n  ) => Promise<[(Suggestion | string)[], AlreadySet]>;\n  onSelect: (s: Suggestion) => void;\n  onCreate: (s: string) => void;\n  suggestionLabel: (s: Suggestion) => string;\n  renderSuggestion: (s: Suggestion | string) => React.ReactElement;\n}) => {\n  const [value, setValue] = useState<Suggestion | string | null>(\n    props.selection ?? null\n  );\n  useEffect(() => setValue(props.selection ?? null), [props.selection]);\n  const [suggestions, setSuggestions] = useState<(Suggestion | string)[]>([]);\n  const [alreadySet, setAlreadySet] = useState(false);\n  const onInputChange = (event: React.ChangeEvent<{}>, value: string) =>\n    props.onInputChange(value).then(([suggestions, alreadySet]) => {\n      setSuggestions(suggestions);\n      setAlreadySet(alreadySet);\n    });\n  const onChange = (\n    event: ChangeEvent<{}>,\n    newValue: string | Suggestion | null\n  ) => {\n    setValue(newValue);\n    if (typeof newValue === 'string') {\n      props.onCreate(newValue);\n    } else {\n      props.onSelect(newValue as Suggestion);\n    }\n  };\n  return (\n    <Autocomplete\n      value={value}\n      onInputChange={onInputChange}\n      onChange={onChange}\n      getOptionLabel={(option: Suggestion | string) =>\n        typeof option === 'string' ? option : props.suggestionLabel(option)\n      }\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      freeSolo\n      options={suggestions}\n      renderOption={(renderProps, s: Suggestion | string) =>\n        React.cloneElement(props.renderSuggestion(s), renderProps)\n      }\n      renderInput={params => (\n        <div>\n          <TextField\n            {...params}\n            label={props.label}\n            variant=\"outlined\"\n            size=\"small\"\n            css={css`\n              background: ${colors.white};\n            `}\n          />\n          <div\n            css={css`\n              font-size: 0.8rem;\n              height: 15px;\n            `}\n          >\n            {alreadySet && <span>{props.alreadySetLabel}</span>}\n          </div>\n        </div>\n      )}\n    />\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { appContext } from '../../../../ApplicationContext';\nimport { SharedConstants } from '../../../../constants';\nimport { DeliberationId } from '../../../../domain/ids';\nimport { DeliberationDto } from '../../../../domain/organisme';\nimport { formatLocaleDate } from '../../../../simple-fr';\nimport {\n  AlreadySet,\n  AutocompleteInput\n} from '../../../base-component/AutocompleteInput';\n\nexport const SelectDeliberationInput = (props: {\n  selection: DeliberationDto | undefined;\n  excludeDeliberations: DeliberationId[];\n  onChange: (d: DeliberationDto) => void;\n  onCreate: (libelle: string) => void;\n}) => {\n  const onInputChange = (\n    input: string\n  ): Promise<[(DeliberationDto | string)[], AlreadySet]> => {\n    if (input.length >= SharedConstants.searchLengthLimit) {\n      return appContext\n        .queryService()\n        .searchDeliberationQuery({\n          searchToken: input\n        })\n        .then(r => {\n          const results = r.results\n            // on vire les delib qui sont déjà liées\n            .filter(r => !props.excludeDeliberations.includes(r.id));\n          const proposeNew =\n            r.results.filter(r => r.libelle === input).length === 0;\n          const suggestions = !proposeNew ? results : [...results, input];\n          const alreadySet = !proposeNew && results.length === 0;\n          return [suggestions, alreadySet];\n        });\n    }\n    return Promise.resolve([[], false]);\n  };\n  return (\n    <AutocompleteInput\n      selection={props.selection}\n      label=\"Ajouter lien délibération\"\n      alreadySetLabel=\"La délibération est déjà liée\"\n      onInputChange={onInputChange}\n      suggestionLabel={(s: DeliberationDto) =>\n        s.libelle +\n        (s.deliberationDate\n          ? ` (du ${formatLocaleDate(s.deliberationDate)})`\n          : '')\n      }\n      onSelect={props.onChange}\n      onCreate={props.onCreate}\n      renderSuggestion={(s: DeliberationDto | string) => {\n        if (typeof s === 'string') {\n          return (\n            <li>\n              <span\n                css={css`\n                  font-weight: bold;\n                  margin-right: 6px;\n                `}\n              >\n                [créer délibération]\n              </span>{' '}\n              {s}\n            </li>\n          );\n        }\n        const d = s as DeliberationDto;\n        return (\n          <li>\n            {d.libelle}\n            {d.deliberationDate && (\n              <span\n                css={css`\n                  font-size: 0.8rem;\n                `}\n              >\n                {' '}\n                (du {d.deliberationDate})\n              </span>\n            )}\n          </li>\n        );\n      }}\n    />\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@mui/material';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { DeliberationId } from '../../../../domain/ids';\nimport { DeliberationDto } from '../../../../domain/organisme';\nimport { colors } from '../../../../styles/vars';\nimport { TextInput } from '../../../base-component/TextInput';\nimport { CreateDeliberationDialog } from '../../../deliberation/CreateDeliberationDialog';\nimport { SelectDeliberationInput } from './SelectDeliberationInput';\n\nexport const AddLienDeliberationDialog = (props: {\n  display: boolean;\n  onClose: () => void;\n  excludeDeliberations: DeliberationId[];\n  onNewLienDeliberation: (\n    deliberationId: DeliberationId,\n    comment: string | undefined\n  ) => Promise<void>;\n}) => {\n  const [selectedDeliberation, setSelectedDeliberation] = useState<\n    DeliberationDto | undefined\n  >(undefined);\n  const [displayCreateDeliberationDialog, setDisplayCreateDeliberationDialog] =\n    useState(false);\n  const [createDeliberationLibelle, setCreateDeliberationLibelle] =\n    useState('');\n  const [comment, setComment] = useState('');\n  const [delibMandatory, setDelibMandatory] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const onSubmit = () => {\n    if (!selectedDeliberation) {\n      setDelibMandatory(true);\n      return;\n    }\n    setDelibMandatory(false);\n    setSubmitting(true);\n    props\n      .onNewLienDeliberation(\n        selectedDeliberation.id,\n        comment !== '' ? comment : undefined\n      )\n      .then(() => setSubmitting(false));\n  };\n  return (\n    <React.Fragment>\n      <Dialog\n        // FIXME choose - pas clair le changement de popup si on superpose pas ?\n        // open={props.display && !displayCreateDeliberationDialog}\n        open={props.display}\n        onClose={props.onClose}\n        fullWidth={true}\n      >\n        <DialogTitle>Ajout délibération</DialogTitle>\n        <DialogContent>\n          <div\n            css={css`\n              margin: 10px 0;\n            `}\n          >\n            <SelectDeliberationInput\n              selection={selectedDeliberation}\n              excludeDeliberations={props.excludeDeliberations}\n              onChange={setSelectedDeliberation}\n              onCreate={libelle => {\n                setCreateDeliberationLibelle(libelle);\n                setDisplayCreateDeliberationDialog(true);\n              }}\n            />\n            {delibMandatory && (\n              <div\n                css={css`\n                  color: ${colors.errorRed};\n                  font-weight: bold;\n                `}\n              >\n                Sélection obligatoire\n              </div>\n            )}\n          </div>\n          <div\n            css={css`\n              margin: 10px 0;\n            `}\n          >\n            <TextInput\n              name=\"comment\"\n              label=\"Commentaire\"\n              multiline={true}\n              onChange={e => setComment(e.currentTarget.value)}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Annuler\n          </Button>\n          <div>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={submitting}\n              onClick={onSubmit}\n            >\n              Ajouter\n            </Button>\n            {submitting && (\n              <div\n                css={css`\n                  position: absolute;\n                  top: 50%;\n                  left: 50%;\n                  margin-top: -12px;\n                  margin-left: -12px;\n                `}\n              >\n                <CircularProgress size={24} />\n              </div>\n            )}\n          </div>\n        </DialogActions>\n      </Dialog>\n      <CreateDeliberationDialog\n        libelle={createDeliberationLibelle}\n        display={displayCreateDeliberationDialog}\n        close={() => setDisplayCreateDeliberationDialog(false)}\n        onNewDeliberation={deliberation => {\n          setDisplayCreateDeliberationDialog(false);\n          setCreateDeliberationLibelle('');\n          setSelectedDeliberation(deliberation);\n        }}\n      />\n    </React.Fragment>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Add } from '@mui/icons-material';\nimport { Button } from '@mui/material';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { DeliberationId } from '../../../../domain/ids';\nimport { LienDeliberationDto } from '../../../../domain/organisme';\nimport { colors } from '../../../../styles/vars';\nimport { editCommonClasses } from '../EditOrganismeComponent';\nimport { AddLienDeliberationDialog } from './AddLienDeliberationDialog';\n\nexport const HeaderDeliberationsComponent = (props: {\n  lienDeliberations: LienDeliberationDto[];\n  onNewLienDeliberation: (\n    deliberationId: DeliberationId,\n    comment: string | undefined\n  ) => Promise<void>;\n}) => {\n  const [displayDialog, setDisplayDialog] = useState(false);\n  return (\n    <React.Fragment>\n      <div\n        css={css`\n          display: flex;\n          flex-direction: row;\n          background: ${colors.clearGrey2};\n          ${editCommonClasses.border};\n          padding: 8px;\n          height: 56px;\n        `}\n      >\n        <div\n          css={css`\n            flex: 1;\n            text-align: left;\n            padding: 4px 0 0 10px;\n          `}\n        >\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            css={css`\n              background: white;\n            `}\n            startIcon={<Add />}\n            onClick={() => setDisplayDialog(true)}\n          >\n            Ajouter délibération\n          </Button>\n        </div>\n      </div>\n      <AddLienDeliberationDialog\n        display={displayDialog}\n        onClose={() => setDisplayDialog(false)}\n        excludeDeliberations={props.lienDeliberations.map(\n          l => l.deliberation.id\n        )}\n        onNewLienDeliberation={(\n          id: DeliberationId,\n          comment: string | undefined\n        ) =>\n          props\n            .onNewLienDeliberation(id, comment)\n            .then(() => setDisplayDialog(false))\n        }\n      />\n    </React.Fragment>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { DeliberationId } from '../../../../domain/ids';\nimport { LienDeliberationDto } from '../../../../domain/organisme';\nimport { asString } from '../../../../utils/nominal-class';\nimport { editCommonClasses } from '../EditOrganismeComponent';\nimport { EditDeliberationListItem } from './EditDeliberationListItem';\nimport { HeaderDeliberationsComponent } from './HeaderDeliberationsComponent';\n\nexport const EditDeliberationListComponent = (props: {\n  lienDeliberations: LienDeliberationDto[];\n  onNewLienDeliberation: (\n    deliberationId: DeliberationId,\n    comment: string | undefined\n  ) => Promise<void>;\n}) => {\n  return (\n    <React.Fragment>\n      <h3>Délibérations</h3>\n      <div css={editCommonClasses.columnPadding}>\n        <HeaderDeliberationsComponent\n          lienDeliberations={props.lienDeliberations}\n          onNewLienDeliberation={props.onNewLienDeliberation}\n        />\n      </div>\n      <div css={editCommonClasses.columnPadding}>\n        {props.lienDeliberations.map(l => (\n          <EditDeliberationListItem key={asString(l.id)} lienDeliberation={l} />\n        ))}\n      </div>\n    </React.Fragment>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { PropsWithChildren } from 'react';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { InstanceId, OrganismeId, RepresentationId } from '../../../domain/ids';\nimport { assertUnreachable } from '../../../utils';\n\nexport type DragAndDropItemType = DropEvent['type'];\n\nexport interface DropDestination<DroppableId> {\n  droppableId: DroppableId;\n  index: number;\n}\n\ninterface GenericDropEvent<DraggableId, DroppableId> {\n  draggableId: DraggableId;\n  source: DropDestination<DroppableId>;\n  destination?: DropDestination<DroppableId>;\n}\n\ntype DropEvent = RepresentationDropEvent | InstanceDropEvent;\n\ninterface RepresentationDropEvent\n  extends GenericDropEvent<RepresentationId, OrganismeId | InstanceId> {\n  type: 'representation';\n}\n\ninterface InstanceDropEvent extends GenericDropEvent<InstanceId, OrganismeId> {\n  type: 'instance';\n}\n\nexport const DragAndDropGlobalContext = (\n  props: PropsWithChildren<{\n    onMoveRepresentation: (\n      representationId: RepresentationId,\n      source: DropDestination<OrganismeId | InstanceId>,\n      destination?: DropDestination<OrganismeId | InstanceId>\n    ) => void;\n  }>\n) => {\n  const onDragEnd = (rawEvent: DropResult) => {\n    const event = { ...rawEvent } as GenericDropEvent<any, any> as DropEvent;\n    if (!event.destination) {\n      return;\n    }\n    if (\n      event.source.droppableId === event.destination.droppableId &&\n      event.source.index === event.destination.index\n    ) {\n      return;\n    }\n    // FIXMENOW merde de typescript\n    const type = event.type;\n    switch (type) {\n      case 'representation':\n        props.onMoveRepresentation(\n          event.draggableId,\n          event.source,\n          event.destination\n        );\n        break;\n      case 'instance':\n        throw Error('Not implemented yet');\n      default:\n        assertUnreachable(type);\n    }\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>{props.children}</DragDropContext>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Edit } from '@mui/icons-material';\nimport { DialogContent, DialogTitle } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport * as React from 'react';\nimport { PropsWithChildren, ReactElement, useState } from 'react';\nimport { ItemStatus } from '../../../domain/organisme';\nimport { assertUnreachable, clientUid } from '../../../utils';\nimport { asString } from '../../../utils/nominal-class';\nimport { TextInput } from '../../base-component/TextInput';\nimport { classes } from '../../category/EditCategoriesComponent';\nimport { dialogClasses } from './dialog-common';\n\nconst editClass = asString(clientUid());\n\nexport const EditNomComponent = (\n  props: PropsWithChildren<{\n    kind: 'organisme' | 'instance';\n    nom: string;\n    onUpdateNom: (nom: string, then: () => void) => void;\n    onUpdateStatus: (status: ItemStatus, then: () => void) => void;\n    titleElement: ReactElement;\n  }>\n) => {\n  const [displayPopup, setDisplayPopup] = useState(false);\n  const [nom, setNom] = useState(props.nom);\n  const cancel = () => {\n    setNom(props.nom);\n    setDisplayPopup(false);\n  };\n  return (\n    <React.Fragment>\n      <div\n        css={css`\n          position: relative;\n          padding-left: 50px;\n          display: flex;\n\n          .${editClass} {\n            visibility: hidden;\n          }\n\n          &:hover {\n            .${editClass} {\n              visibility: visible;\n            }\n          }\n        `}\n      >\n        {React.cloneElement(props.titleElement, {\n          children: props.nom\n        })}\n        <div\n          css={css`\n            margin: auto 40px;\n          `}\n        >\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            css={css`\n              background: white;\n            `}\n            className={editClass}\n            startIcon={<Edit />}\n            onClick={() => setDisplayPopup(true)}\n          >\n            Modifier\n          </Button>\n        </div>\n      </div>\n      <Dialog open={displayPopup} onClose={cancel}>\n        <DialogTitle>Édition</DialogTitle>\n        <DialogContent>\n          <div css={dialogClasses.editBlock}>\n            <h3>Modifier libelle</h3>\n            <TextInput\n              name=\"libelle\"\n              initialValue={nom}\n              onChange={value => setNom(value.currentTarget.value)}\n            />\n            <div css={classes.editButton}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n                onClick={() =>\n                  props.onUpdateNom(nom, () => setDisplayPopup(false))\n                }\n              >\n                Enregistrer\n              </Button>\n            </div>\n          </div>\n          <div css={dialogClasses.editBlock}>\n            <h3>Archivage</h3>\n            {(() => {\n              switch (props.kind) {\n                case 'organisme':\n                  return \"L'organisme pourra être retrouvé\";\n                case 'instance':\n                  return \"L'instance pourra être retrouvée\";\n                default:\n                  assertUnreachable(props.kind);\n              }\n            })()}{' '}\n            dans les archives.\n            <div css={classes.editButton}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"warning\"\n                size=\"small\"\n                onClick={() =>\n                  props.onUpdateStatus('archive', () => setDisplayPopup(false))\n                }\n              >\n                Archiver\n              </Button>\n            </div>\n          </div>\n          <div css={dialogClasses.editBlock}>\n            <h3>Suppression</h3>À utiliser en cas d'<b>erreur de saisie</b>{' '}\n            uniquement.\n            <div css={classes.editButton}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"error\"\n                size=\"small\"\n                onClick={() =>\n                  props.onUpdateStatus('trash', () => setDisplayPopup(false))\n                }\n              >\n                Supprimer\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDisplayPopup(false)} color=\"primary\">\n            Annuler\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { FormControl, MenuItem, Select, Theme } from '@mui/material';\nimport { SelectChangeEvent } from '@mui/material/Select/SelectInput';\nimport { makeStyles } from '@mui/styles';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { clientUid } from '../../utils';\nimport { asString, NominalString } from '../../utils/nominal-class';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  formControl: {\n    margin: theme.spacing(1)\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nexport interface SelectOption<T extends NominalString<string>> {\n  value: T | undefined;\n  label: string;\n}\n\nexport const SelectInput = <Id extends NominalString<string>>(props: {\n  label: string;\n  initialValue: Id | undefined;\n  options: SelectOption<Id>[];\n  onChange: (value: Id | undefined) => void;\n}) => {\n  const inputId = clientUid();\n  const classes = useStyles();\n  const [textValue, setTextValue] = useState<Id | ''>(props.initialValue ?? '');\n  const onChange = (event: SelectChangeEvent<unknown>) => {\n    const value = event.target.value as Id | '';\n    setTextValue(value);\n    props.onChange(value !== '' ? value : undefined);\n  };\n  return (\n    <div\n      css={css`\n        display: flex;\n      `}\n    >\n      <div\n        css={css`\n          flex: 25%;\n          font-size: 1rem;\n          text-align: right;\n          padding: 19px 10px 0 0;\n        `}\n      >\n        {props.label}\n      </div>\n      <FormControl\n        variant=\"outlined\"\n        className={classes.formControl}\n        fullWidth={true}\n        size={'small'}\n        css={css`\n          flex: 75%;\n        `}\n      >\n        <Select\n          labelId={asString(inputId)}\n          id={asString(inputId)}\n          value={textValue}\n          onChange={onChange}\n          displayEmpty={true}\n          css={css`\n            background: white;\n          `}\n        >\n          {props.options.map((o, i) => {\n            return (\n              <MenuItem key={i} value={o.value ? asString(o.value) : ''}>\n                {o.label}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { Category } from '../../../domain/bootstrap-data';\nimport {\n  NatureJuridiqueId,\n  OrgarifId,\n  SecteurId,\n  TypeStructureId\n} from '../../../domain/ids';\nimport { state } from '../../../state/state';\nimport { colors } from '../../../styles/vars';\nimport { Dict } from '../../../utils/nominal-class';\nimport { SelectInput, SelectOption } from '../../base-component/SelectInput';\nimport { editCommonClasses } from './EditOrganismeComponent';\n\nconst EditOrganismeCategoryComponent = <\n  C extends Category,\n  Id extends OrgarifId\n>(props: {\n  label: string;\n  categoryList: C[];\n  categoryById: Dict<Id, C>;\n  currentId: Id | undefined;\n  onChange: (id: Id | undefined) => void;\n}) => {\n  const options: SelectOption<OrgarifId>[] = props.categoryList.map(e => ({\n    value: e.id,\n    label: e.libelle\n  }));\n  options.unshift({\n    value: undefined,\n    label: `- Sans ${props.label.toLowerCase()} -`\n  });\n  return (\n    <div\n      css={css`\n        background: ${colors.clearGrey2};\n        ${editCommonClasses.border};\n        // border: 1px solid ${colors.clearGrey};\n        padding: 2px;\n      `}\n    >\n      <SelectInput\n        label={props.label}\n        initialValue={props.currentId}\n        options={options}\n        onChange={id => props.onChange(id as Id)}\n      />\n    </div>\n  );\n};\n\nexport const EditOrganismeNatureJuridiqueComponent = (props: {\n  natureJuridiqueId: NatureJuridiqueId | undefined;\n  onChange: (id: NatureJuridiqueId | undefined) => void;\n}) => (\n  <EditOrganismeCategoryComponent\n    label=\"Nature juridique\"\n    categoryList={useRecoilValue(state.natureJuridiques)}\n    categoryById={useRecoilValue(state.natureJuridiquesById)}\n    currentId={props.natureJuridiqueId}\n    onChange={props.onChange}\n  />\n);\n\nexport const EditOrganismeSecteurComponent = (props: {\n  secteurId: SecteurId | undefined;\n  onChange: (id: SecteurId | undefined) => void;\n}) => (\n  <EditOrganismeCategoryComponent\n    label=\"Secteur\"\n    categoryList={useRecoilValue(state.secteurs)}\n    categoryById={useRecoilValue(state.secteursById)}\n    currentId={props.secteurId}\n    onChange={props.onChange}\n  />\n);\n\nexport const EditOrganismeTypeStructureComponent = (props: {\n  typeStructureId: TypeStructureId | undefined;\n  onChange: (id: TypeStructureId | undefined) => void;\n}) => (\n  <EditOrganismeCategoryComponent\n    label=\"Type de structure\"\n    categoryList={useRecoilValue(state.typeStructures)}\n    categoryById={useRecoilValue(state.typeStructuresById)}\n    currentId={props.typeStructureId}\n    onChange={props.onChange}\n  />\n);\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport {\n  Draggable,\n  DraggableProvided,\n  DraggableStateSnapshot,\n  Droppable,\n  DroppableProvided,\n  DroppableStateSnapshot\n} from 'react-beautiful-dnd';\nimport {\n  DeliberationId,\n  InstanceId,\n  RepresentantId\n} from '../../../../domain/ids';\nimport { InstanceDto, ItemStatus } from '../../../../domain/organisme';\nimport { colors } from '../../../../styles/vars';\nimport { asString } from '../../../../utils/nominal-class';\nimport { DragAndDropItemType } from '../DragAndDropGlobalContext';\nimport { EditNomComponent } from '../EditNomComponent';\nimport { RepresentantsDeliberationsBlock } from '../EditOrganismeComponent';\n\nconst instance: DragAndDropItemType = 'instance';\n\nexport const InstanceDragDropZone = (props: {\n  children(\n    provided: DroppableProvided,\n    snapshot: DroppableStateSnapshot\n  ): React.ReactElement<HTMLElement>;\n}) => (\n  <Droppable type={instance} droppableId={'instancesDropZone'}>\n    {props.children}\n  </Droppable>\n);\n\nexport const EditInstancesComponent = (props: {\n  instances: InstanceDto[];\n  onNomChange: (instanceId: InstanceId, nom: string, then: () => void) => void;\n  onStatusChange: (\n    instanceId: InstanceId,\n    status: ItemStatus,\n    then: () => void\n  ) => void;\n  onNombreRepresentantsChange: (\n    instanceId: InstanceId,\n    nombre: number | undefined\n  ) => void;\n  onAddRepresentation: (\n    representantId: RepresentantId,\n    instanceId: InstanceId\n  ) => Promise<void>;\n  onNewLienDeliberation: (\n    instanceId: InstanceId,\n    deliberationId: DeliberationId,\n    comment: string | undefined\n  ) => Promise<void>;\n}) => {\n  return (\n    <InstanceDragDropZone>\n      {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n          css={css`\n            background: ${snapshot.isDraggingOver ? colors.lightblue : 'none'};\n            display: flex;\n            flex-direction: column;\n          `}\n        >\n          {props.instances.map((instance, index) => (\n            <Draggable\n              key={asString(instance.id)}\n              draggableId={asString(instance.id)}\n              index={index}\n            >\n              {(\n                providedDraggable: DraggableProvided,\n                snapshotDraggable: DraggableStateSnapshot\n              ) => (\n                <div\n                  ref={providedDraggable.innerRef}\n                  {...providedDraggable.draggableProps}\n                  css={css`\n                    flex: 1;\n                    user-select: none;\n                    background: ${snapshotDraggable.isDragging\n                      ? colors.dragableMoving\n                      : colors.white};\n                    margin: 10px;\n                  `}\n                >\n                  <div\n                    {...providedDraggable.dragHandleProps}\n                    css={css`\n                      position: relative;\n                      border-radius: 4px;\n                      margin: 0;\n                    `}\n                  >\n                    <EditNomComponent\n                      kind={'instance'}\n                      nom={instance.nom}\n                      onUpdateNom={(nom: string, then: () => void) =>\n                        props.onNomChange(instance.id, nom, then)\n                      }\n                      onUpdateStatus={(status: ItemStatus, then: () => void) =>\n                        props.onStatusChange(instance.id, status, then)\n                      }\n                      titleElement={\n                        <h3\n                          css={css`\n                            font-weight: bold;\n                          `}\n                        >\n                          {/* eslint-disable-line jsx-a11y/heading-has-content */}\n                        </h3>\n                      }\n                    />\n                  </div>\n                  <RepresentantsDeliberationsBlock\n                    organismeOrInstanceId={instance.id}\n                    nombreRepresentants={instance.nombreRepresentants}\n                    representations={instance.representations}\n                    onNombreRepresentantsChange={(nombre: number | undefined) =>\n                      props.onNombreRepresentantsChange(instance.id, nombre)\n                    }\n                    onAddRepresentation={(representantId: RepresentantId) =>\n                      props.onAddRepresentation(representantId, instance.id)\n                    }\n                    lienDeliberations={instance.lienDeliberations}\n                    onNewLienDeliberation={(\n                      deliberationId: DeliberationId,\n                      comment: string | undefined\n                    ): Promise<void> =>\n                      props.onNewLienDeliberation(\n                        instance.id,\n                        deliberationId,\n                        comment\n                      )\n                    }\n                  />\n                </div>\n              )}\n            </Draggable>\n          ))}\n          {provided.placeholder}\n        </div>\n      )}\n    </InstanceDragDropZone>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { Box, Tab, Tabs } from '@mui/material';\nimport * as React from 'react';\nimport { PropsWithChildren, ReactElement } from 'react';\n\ninterface TabPanelProps extends PropsWithChildren<{}> {\n  label: string;\n}\n\nexport const TabPanel = (props: TabPanelProps) => (\n  <React.Fragment>{props.children}</React.Fragment>\n);\n\nexport const TabsContainer = (props: PropsWithChildren<{}>) => {\n  const tabs = Array.from(props.children as Iterable<ReactElement>)\n    // dans le cas d'une tab conditionnelle, on a un undefined dans les children\n    .filter(t => !!t)\n  const labels = tabs\n    .map(n => n.props['label']) as string[];\n  const [containerValue, setContainerValue] = React.useState(0);\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs\n          value={containerValue}\n          onChange={(event: React.SyntheticEvent, newValue: number) =>\n            setContainerValue(newValue)\n          }\n        >\n          {labels.map((l, i) => (\n            <Tab key={i} label={l} />\n          ))}\n        </Tabs>\n      </Box>\n      {tabs\n        .filter((_, i) => containerValue === i)\n        .map((c, i) => (\n          <Box key={i} sx={{ p: 3 }}>\n            {c}\n          </Box>\n        ))}\n    </Box>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport {\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  FormControlLabel,\n  Radio,\n  RadioGroup\n} from '@mui/material';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { RepresentationDto } from '../../../../domain/organisme';\nimport { TabPanel, TabsContainer } from '../../../base-component/TabsContainer';\nimport { TextInput } from '../../../base-component/TextInput';\nimport { classes } from '../../../category/EditCategoriesComponent';\nimport { dialogClasses } from '../dialog-common';\n\nconst RepresentationPanel = (props: {\n  representation: RepresentationDto;\n  onClose: () => void;\n}) => (\n  <React.Fragment>\n    <div css={dialogClasses.editBlock}>\n      <h3>Représentant</h3>\n      <TextInput name={'date'} type={'date'} label={'Date de début'} />\n    </div>\n    <div css={dialogClasses.editBlock}>\n      <h3>Suppléant</h3>\n      {props.representation.suppleance && (\n        <TextInput name={'date'} type={'date'} label={'Date de début'} />\n      )}\n      {!props.representation.suppleance && (\n        <Button variant=\"contained\">Ajouter Suppléant</Button>\n      )}\n    </div>\n    <div\n      css={css`\n        ${classes.editButton}\n        padding-top: 40px;\n      `}\n    >\n      <Button onClick={props.onClose} color=\"primary\">\n        Annuler\n      </Button>\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\">\n        Enregistrer\n      </Button>\n    </div>\n  </React.Fragment>\n);\n\ntype SuppleantDecision = 'remplace' | 'demissionne';\n\nconst DemissionPanel = (props: {\n  representation: RepresentationDto;\n  onClose: () => void;\n}) => {\n  const [suppleantDecision, setSuppleantDecision] =\n    useState<SuppleantDecision>('remplace');\n  return (\n    <React.Fragment>\n      <div css={dialogClasses.editBlock}>\n        <h3>Représentant</h3>\n        <TextInput name={'date'} type={'date'} label={'Date de fin'} />\n      </div>\n      {props.representation.suppleance && (\n        <div css={dialogClasses.editBlock}>\n          <h3>Suppléant</h3>\n          <RadioGroup\n            value={suppleantDecision}\n            name=\"radio-buttons-group\"\n            onChange={(\n              event: React.ChangeEvent<HTMLInputElement>,\n              value: string\n            ) => setSuppleantDecision(value as SuppleantDecision)}\n          >\n            <FormControlLabel\n              value=\"remplace\"\n              control={<Radio />}\n              label=\"Remplace le représentant à date + 1\"\n            />\n            <FormControlLabel\n              value=\"demissionne\"\n              control={<Radio />}\n              label=\"Démissionne à date\"\n            />\n          </RadioGroup>\n        </div>\n      )}\n      <div css={classes.editButton}>\n        <Button onClick={props.onClose} color=\"primary\">\n          Annuler\n        </Button>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\">\n          Enregistrer\n        </Button>\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst DemisssionSuppleantPanel = (props: { onClose: () => void }) => (\n  <React.Fragment>\n    <div css={dialogClasses.editBlock}>\n      <h3>Suppléant</h3>\n      <TextInput name={'date'} type={'date'} label={'Date de fin'} />\n    </div>\n    <div\n      css={css`\n        ${classes.editButton}\n        padding-top: 40px;\n      `}\n    >\n      <Button onClick={props.onClose} color=\"primary\">\n        Annuler\n      </Button>\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\">\n        Enregistrer\n      </Button>\n    </div>\n  </React.Fragment>\n);\n\nconst SuppressionPanel = (props: {\n  representation: RepresentationDto;\n  onClose: () => void;\n}) => (\n  <React.Fragment>\n    <div css={dialogClasses.editBlock}>\n      La suppression est définitive et sert à corriger les erreurs de saisie\n      uniquement.\n    </div>\n    {!props.representation.suppleance && (\n      <div css={dialogClasses.editBlock}>\n        <Button variant=\"contained\" color=\"error\">\n          Supprimer la représentation\n        </Button>\n      </div>\n    )}\n    {props.representation.suppleance && (\n      <React.Fragment>\n        <div css={dialogClasses.editBlock}>\n          <h3>Représentant</h3>\n          Supprimer la représentation\n          <React.Fragment>\n            {' '}\n            <b>et</b> la suppléance\n          </React.Fragment>\n          <div\n            css={css`\n              padding: 10px 0;\n            `}\n          >\n            <Button variant=\"contained\" color=\"error\">\n              Supprimer\n            </Button>\n          </div>\n        </div>\n        <div css={dialogClasses.editBlock}>\n          <h3>Suppléant</h3>\n          Supprimer la suppléance uniquement\n          <div\n            css={css`\n              padding: 10px 0;\n            `}\n          >\n            <Button variant=\"contained\" color=\"error\">\n              Supprimer\n            </Button>\n          </div>\n        </div>\n      </React.Fragment>\n    )}\n    <div\n      css={css`\n        ${classes.editButton}\n      `}\n    >\n      <Button onClick={props.onClose} color=\"primary\">\n        Annuler\n      </Button>\n    </div>\n  </React.Fragment>\n);\n\nexport const EditRepresentationDiaglog = (props: {\n  representation: RepresentationDto;\n  display: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      open={props.display}\n      onClose={props.onClose}\n      fullWidth={true}\n      maxWidth={'lg'}\n    >\n      <DialogTitle>Modifier</DialogTitle>\n      <DialogContent>\n        <TabsContainer>\n          <TabPanel label=\"Dates de début\">\n            <RepresentationPanel\n              representation={props.representation}\n              onClose={props.onClose}\n            />\n          </TabPanel>\n          <TabPanel label=\"Démission représentant\">\n            <DemissionPanel\n              representation={props.representation}\n              onClose={props.onClose}\n            />\n          </TabPanel>\n          {props.representation.suppleance && (\n            <TabPanel label=\"Démission suppléant\">\n              <DemisssionSuppleantPanel onClose={props.onClose} />\n            </TabPanel>\n          )}\n          <TabPanel label=\"Suppression\">\n            <SuppressionPanel\n              representation={props.representation}\n              onClose={props.onClose}\n            />\n          </TabPanel>\n        </TabsContainer>\n      </DialogContent>\n      {/*<DialogActions>*/}\n      {/*<Button onClick={props.onClose} color=\"primary\">*/}\n      {/*  Annuler*/}\n      {/*</Button>*/}\n      {/*<Button color=\"primary\">Enregistrer</Button>*/}\n      {/*</DialogActions>*/}\n    </Dialog>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { DragHandle, Edit } from '@mui/icons-material';\nimport { Button } from '@mui/material';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { RepresentationDto } from '../../../../domain/organisme';\nimport { colors } from '../../../../styles/vars';\nimport { clientUid } from '../../../../utils';\nimport { asString } from '../../../../utils/nominal-class';\nimport { EditRepresentationDiaglog } from './EditRepresentationDialog';\n\nconst actionsClass = asString(clientUid());\n\nexport const EditRepresentationListItem = (props: {\n  representation: RepresentationDto;\n}) => {\n  const [displayEditPopup, setDisplayEditPopup] = useState(false);\n  return (\n    <React.Fragment>\n      <div\n        css={css`\n          margin: 12px 4px;\n          display: flex;\n          align-items: center;\n          .${actionsClass} {\n            visibility: hidden;\n          }\n          &:hover {\n            .${actionsClass} {\n              visibility: visible;\n            }\n          }\n        `}\n      >\n        <div\n          className={actionsClass}\n          css={css`\n            width: 40px;\n            height: 40px;\n            padding-top: 8px;\n            margin-right: 20px;\n            background: ${colors.clearGrey};\n            border-radius: 50%;\n            text-align: center;\n          `}\n        >\n          <DragHandle />\n        </div>\n        <div>\n          <div>\n            {props.representation.representant.prenom}{' '}\n            {props.representation.representant.nom}\n          </div>\n          {props.representation.suppleance && (\n            <div\n              css={css`\n                padding: 8px 0 0 12px;\n                font-size: 0.9rem;\n              `}\n            >\n              <span\n                css={css`\n                  font-style: italic;\n                  color: ${colors.grey};\n                `}\n              >\n                Suppléant :\n              </span>{' '}\n              {props.representation.suppleance.representant.prenom}{' '}\n              {props.representation.suppleance.representant.nom}\n            </div>\n          )}\n        </div>\n        <div\n          css={css`\n            flex: 1;\n          `}\n        />\n        <div\n          css={css`\n            margin-left: 20px;\n            display: flex;\n          `}\n          className={actionsClass}\n        >\n          <div\n            css={css`\n              margin-left: 10px;\n            `}\n          >\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              css={css`\n                background: white;\n              `}\n              startIcon={<Edit />}\n              onClick={() => setDisplayEditPopup(true)}\n            >\n              Modifier\n            </Button>\n          </div>\n        </div>\n      </div>\n      <EditRepresentationDiaglog\n        representation={props.representation}\n        display={displayEditPopup}\n        onClose={() => setDisplayEditPopup(false)}\n      />\n    </React.Fragment>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport {\n  Draggable,\n  DraggableProvided,\n  DraggableStateSnapshot,\n  Droppable,\n  DroppableProvided,\n  DroppableStateSnapshot\n} from 'react-beautiful-dnd';\nimport { InstanceId, OrganismeId } from '../../../../domain/ids';\nimport { RepresentationDto } from '../../../../domain/organisme';\nimport { colors } from '../../../../styles/vars';\nimport { asString } from '../../../../utils/nominal-class';\nimport { DragAndDropItemType } from '../DragAndDropGlobalContext';\nimport { editCommonClasses } from '../EditOrganismeComponent';\nimport { EditRepresentationListItem } from './EditRepresentationListItem';\n\nconst representation: DragAndDropItemType = 'representation';\n\nexport const RepresentantDragDropZone = (props: {\n  organismeOrInstanceId: OrganismeId | InstanceId;\n  children(\n    provided: DroppableProvided,\n    snapshot: DroppableStateSnapshot\n  ): React.ReactElement<HTMLElement>;\n}) => (\n  <Droppable\n    type={representation}\n    droppableId={asString(props.organismeOrInstanceId)}\n  >\n    {props.children}\n  </Droppable>\n);\n\nexport const EditRepresentationDragListComponent = (props: {\n  organismeOrInstanceId: OrganismeId | InstanceId;\n  representations: RepresentationDto[];\n}) => {\n  return (\n    <RepresentantDragDropZone\n      organismeOrInstanceId={props.organismeOrInstanceId}\n    >\n      {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n          css={css`\n            ${editCommonClasses.border};\n            ${editCommonClasses.columnPadding};\n            background: ${snapshot.isDraggingOver ? 'lightblue' : 'white'};\n          `}\n        >\n          {props.representations.length === 0 && (\n            <div\n              css={css`\n                margin: 10px 10px 6px 10px;\n                padding: 10px;\n                height: 44px;\n                border: 3px solid\n                  ${snapshot.isDraggingOver\n                    ? colors.lightblue\n                    : colors.clearGrey};\n                border-radius: 4px;\n                background: ${snapshot.isDraggingOver\n                  ? colors.lightblue\n                  : 'none'};\n              `}\n            >\n              {!snapshot.isDraggingOver && <span>Pas de représentant</span>}\n            </div>\n          )}\n          {props.representations.map((r, index) => (\n            <Draggable\n              key={asString(r.id)}\n              draggableId={asString(r.id)}\n              index={index}\n            >\n              {(\n                providedDraggable: DraggableProvided,\n                snapshotDraggable: DraggableStateSnapshot\n              ) => (\n                <div\n                  ref={providedDraggable.innerRef}\n                  {...providedDraggable.draggableProps}\n                  {...providedDraggable.dragHandleProps}\n                  css={css`\n                    user-select: none;\n                    padding: 10px 20px;\n                    ${editCommonClasses.border};\n                    margin-top: 4px;\n                    &:first-of-type {\n                      margin-top: 0;\n                    }\n                    background: ${snapshotDraggable.isDragging\n                      ? colors.dragableMoving\n                      : colors.clearGrey2};\n                  `}\n                >\n                  <EditRepresentationListItem representation={r} />\n                </div>\n              )}\n            </Draggable>\n          ))}\n          {provided.placeholder}\n        </div>\n      )}\n    </RepresentantDragDropZone>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { TextField } from '@mui/material';\nimport * as React from 'react';\nimport { ChangeEvent, useState } from 'react';\n\n// TODO pourrait reuse TextInput, pas vital...\nexport const NumberInput = (props: {\n  label?: string;\n  initialValue?: number;\n  autoFocus?: boolean;\n  onChange?: (value: number | undefined) => void;\n}) => {\n  const [textValue, setTextValue] = useState(props.initialValue ?? '');\n  return (\n    <TextField\n      label={props.label}\n      variant=\"outlined\"\n      value={textValue}\n      fullWidth={true}\n      autoFocus={props.autoFocus}\n      size={'small'}\n      type=\"number\"\n      onChange={(e: ChangeEvent<HTMLInputElement>) => {\n        const v = e.currentTarget.value;\n        setTextValue(v);\n        if (props.onChange) {\n          props.onChange(v !== '' ? parseInt(v, 10) : undefined);\n        }\n      }}\n      css={css`\n        background: white;\n      `}\n    />\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, DialogTitle } from '@mui/material';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { appContext } from '../../ApplicationContext';\nimport { RepresentantDto } from '../../domain/organisme';\nimport { TextInput } from '../base-component/TextInput';\n\nconst extractPrenomNom = (nomComplet: string) => {\n  const parts = nomComplet.split(' ');\n  if (parts.length > 1) {\n    const prenom = parts[0];\n    parts.shift();\n    const nom = parts.join(' ');\n    return { prenom, nom };\n  } else {\n    return { prenom: parts[0], nom: '' };\n  }\n};\n\nexport const CreateRepresentantDialog = (props: {\n  nomComplet: string;\n  display: boolean;\n  close: () => void;\n  onNewRepresentant: (representantDto: RepresentantDto) => void;\n}) => {\n  const [dialogLoading, setDialogLoading] = useState(false);\n  const extract = extractPrenomNom(props.nomComplet);\n  const [prenom, setPrenom] = useState(extract.prenom);\n  const [nom, setNom] = useState(extract.nom);\n  useEffect(() => {\n    const { prenom, nom } = extractPrenomNom(props.nomComplet);\n    setPrenom(prenom);\n    setNom(nom);\n  }, [props.nomComplet]);\n  const onSubmit = () => {\n    setDialogLoading(true);\n    appContext\n      .commandService()\n      .createRepresentantCommand({ prenom, nom })\n      .then(r => {\n        setDialogLoading(false);\n        const representant: RepresentantDto = {\n          id: r.representantId,\n          isElu: false,\n          civilite: undefined,\n          prenom,\n          nom\n        };\n        props.onNewRepresentant(representant);\n        props.close();\n      });\n  };\n  return (\n    <Dialog open={props.display} onClose={props.close} fullWidth={true}>\n      <DialogTitle>Ajouter nouveau représentant</DialogTitle>\n      <DialogContent>\n        <div\n          css={css`\n            margin: 10px 0;\n          `}\n        >\n          <TextInput\n            name=\"nom\"\n            label=\"Prénom\"\n            initialValue={prenom}\n            onChange={e => setPrenom(e.currentTarget.value)}\n          />\n        </div>\n        <div\n          css={css`\n            margin: 10px 0;\n          `}\n        >\n          <TextInput\n            name=\"nom\"\n            label=\"Nom\"\n            initialValue={nom}\n            onChange={e => setNom(e.currentTarget.value)}\n          />\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.close} color=\"primary\">\n          Annuler\n        </Button>\n        <div\n          css={css`\n            padding-left: 10px;\n          `}\n        >\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={dialogLoading}\n            onClick={onSubmit}\n          >\n            Ajouter\n          </Button>\n          {dialogLoading && (\n            <div\n              css={css`\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                margin-top: -12px;\n                margin-left: -12px;\n              `}\n            >\n              <CircularProgress size={24} />\n            </div>\n          )}\n        </div>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { appContext } from '../../../../ApplicationContext';\nimport { SharedConstants } from '../../../../constants';\nimport { RepresentantDto } from '../../../../domain/organisme';\nimport {\n  AlreadySet,\n  AutocompleteInput\n} from '../../../base-component/AutocompleteInput';\n\nexport const SelectRepresentantInput = (props: {\n  label: string;\n  selection: RepresentantDto | undefined;\n  onChange: (d: RepresentantDto) => void;\n  onCreate: (nom: string) => void;\n}) => {\n  const onInputChange = (\n    input: string\n  ): Promise<[(RepresentantDto | string)[], AlreadySet]> => {\n    if (input.length >= SharedConstants.searchLengthLimit) {\n      return appContext\n        .queryService()\n        .searchRepresentantsQuery({\n          searchToken: input\n        })\n        .then(r => [[...r.representants, input], false]);\n    }\n    return Promise.resolve([[], false]);\n  };\n  return (\n    <AutocompleteInput\n      selection={props.selection}\n      label={props.label}\n      onInputChange={onInputChange}\n      suggestionLabel={(s: RepresentantDto) =>\n        (s.isElu ? '[elu] ' : '') + s.prenom + ' ' + s.nom\n      }\n      onSelect={props.onChange}\n      onCreate={props.onCreate}\n      renderSuggestion={(s: RepresentantDto | string) => {\n        if (typeof s === 'string') {\n          return (\n            <li>\n              <span\n                css={css`\n                  font-weight: bold;\n                  margin-right: 6px;\n                `}\n              >\n                [créer représentant]\n              </span>{' '}\n              {s}\n            </li>\n          );\n        }\n        const d = s as RepresentantDto;\n        return <li>{(s.isElu ? '[elu] ' : '') + s.prenom + ' ' + s.nom}</li>;\n      }}\n    />\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@mui/material';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { RepresentantId } from '../../../../domain/ids';\nimport { RepresentantDto } from '../../../../domain/organisme';\nimport { colors } from '../../../../styles/vars';\nimport { TextInput } from '../../../base-component/TextInput';\nimport { CreateRepresentantDialog } from '../../../representant/CreateRepresentantDialog';\nimport { SelectRepresentantInput } from './SelectRepresentantInput';\n\nexport const AddRepresentationDialog = (props: {\n  display: boolean;\n  onClose: () => void;\n  onAddRepresentation: (representantId: RepresentantId) => Promise<void>;\n}) => {\n  const [selectedRepresentant, setSelectedRepresentant] = useState<\n    RepresentantDto | undefined\n  >(undefined);\n  const [selectedSuppleant, setSelectedSuppleant] = useState<\n    RepresentantDto | undefined\n  >(undefined);\n  const [displayCreateRepresentantDialog, setDisplayCreateRepresentantDialog] =\n    useState(false);\n  const [createRepresentantNom, setCreateRepresentantNom] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [representantMandatory, setRepresentantMandatory] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const onSubmit = () => {\n    if (!selectedRepresentant) {\n      setRepresentantMandatory(true);\n      return;\n    }\n    setRepresentantMandatory(false);\n    setSubmitting(true);\n    props\n      .onAddRepresentation(selectedRepresentant.id)\n      .then(() => setSubmitting(false));\n  };\n  return (\n    <React.Fragment>\n      <Dialog\n        // FIXME choose - pas clair le changement de popup si on superpose pas ?\n        // open={props.display && !displayCreateRepresentantDialog}\n        open={props.display}\n        onClose={props.onClose}\n        fullWidth={true}\n      >\n        <DialogTitle>Ajout représentant</DialogTitle>\n        <DialogContent>\n          <h3>Représentant</h3>\n          <div\n            css={css`\n              margin: 10px 0;\n            `}\n          >\n            <SelectRepresentantInput\n              label=\"Représentant\"\n              selection={selectedRepresentant}\n              onChange={setSelectedRepresentant}\n              onCreate={nom => {\n                setCreateRepresentantNom(nom);\n                setDisplayCreateRepresentantDialog(true);\n              }}\n            />\n            {representantMandatory && (\n              <div\n                css={css`\n                  color: ${colors.errorRed};\n                  font-weight: bold;\n                `}\n              >\n                Sélection obligatoire\n              </div>\n            )}\n          </div>\n          <div\n            css={css`\n              margin: 10px 0;\n            `}\n          >\n            <TextInput\n              name={'dateDebutRepresentant'}\n              label=\"Date de début\"\n              type=\"date\"\n            />\n          </div>\n          <div\n            css={css`\n              margin-top: 20px;\n            `}\n          >\n            <h3>Suppléant</h3>\n          </div>\n          <div\n            css={css`\n              margin: 10px 0;\n            `}\n          >\n            <SelectRepresentantInput\n              label=\"Suppléant\"\n              selection={selectedSuppleant}\n              onChange={setSelectedSuppleant}\n              onCreate={nom => {\n                setCreateRepresentantNom(nom);\n                setDisplayCreateRepresentantDialog(true);\n              }}\n            />\n          </div>\n          <div\n            css={css`\n              margin: 10px 0;\n            `}\n          >\n            <TextInput\n              name={'dateDebutSuppléant'}\n              label=\"Date de début\"\n              type=\"date\"\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Annuler\n          </Button>\n          <div\n            css={css`\n              padding-left: 10px;\n            `}\n          >\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={submitting}\n              onClick={onSubmit}\n            >\n              Ajouter\n            </Button>\n            {submitting && (\n              <div\n                css={css`\n                  position: absolute;\n                  top: 50%;\n                  left: 50%;\n                  margin-top: -12px;\n                  margin-left: -12px;\n                `}\n              >\n                <CircularProgress size={24} />\n              </div>\n            )}\n          </div>\n        </DialogActions>\n      </Dialog>\n      <CreateRepresentantDialog\n        nomComplet={createRepresentantNom}\n        display={displayCreateRepresentantDialog}\n        close={() => setDisplayCreateRepresentantDialog(false)}\n        onNewRepresentant={representant => {\n          setDisplayCreateRepresentantDialog(false);\n          setCreateRepresentantNom('');\n          setSelectedRepresentant(representant);\n        }}\n      />\n    </React.Fragment>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Add } from '@mui/icons-material';\nimport { Button } from '@mui/material';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { RepresentantId } from '../../../../domain/ids';\nimport { colors } from '../../../../styles/vars';\nimport { NumberInput } from '../../../base-component/NumberInput';\nimport { editCommonClasses } from '../EditOrganismeComponent';\nimport { AddRepresentationDialog } from './AddRepresentationDialog';\n\nconst classes = {\n  numberBlock: css`\n    width: 60px;\n    margin-right: 10px;\n  `,\n  label: css`\n    position: relative;\n    top: 12px;\n  `\n};\n\nexport const HeaderRepresentationsComponent = (props: {\n  nombreRepresentants?: number;\n  onNombreRepresentantsChange: (nombre: number | undefined) => void;\n  onAddRepresentation: (representantId: RepresentantId) => Promise<void>;\n}) => {\n  const [displayAddRepresentantionDialog, setDisplayAddRepresentantionDialog] =\n    useState(false);\n  return (\n    <React.Fragment>\n      <div\n        css={css`\n          display: flex;\n          flex-direction: row;\n          background: ${colors.clearGrey2};\n          ${editCommonClasses.border};\n          padding: 8px;\n          height: 56px;\n        `}\n      >\n        <div\n          css={css`\n            flex: 1;\n            text-align: left;\n            padding: 4px 0 0 10px;\n          `}\n        >\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            css={css`\n              background: white;\n            `}\n            startIcon={<Add />}\n            onClick={() => setDisplayAddRepresentantionDialog(true)}\n          >\n            Ajouter représentation\n          </Button>\n        </div>\n        <div css={classes.numberBlock}>\n          <NumberInput\n            initialValue={props.nombreRepresentants}\n            onChange={props.onNombreRepresentantsChange}\n          />\n        </div>\n        <div css={classes.label}>représentants</div>\n      </div>\n      <AddRepresentationDialog\n        display={displayAddRepresentantionDialog}\n        onClose={() => setDisplayAddRepresentantionDialog(false)}\n        onAddRepresentation={representantId =>\n          props\n            .onAddRepresentation(representantId)\n            .then(() => setDisplayAddRepresentantionDialog(false))\n        }\n      />\n      {/*<Dialog*/}\n      {/*  open={displayPopup}*/}\n      {/*  onClose={() => setDisplayPopup(false)}*/}\n      {/*  fullWidth={true}*/}\n      {/*>*/}\n      {/*  <DialogTitle>Ajout représentation</DialogTitle>*/}\n      {/*  <DialogContent>*/}\n      {/*    <div css={dialogClasses.editBlock}>*/}\n      {/*      <h3>Représentant</h3>*/}\n      {/*      <AddRepresentantComponent onAddRepresentation={() => {}} />*/}\n      {/*      <div*/}\n      {/*        css={css`*/}\n      {/*          margin-top: 20px;*/}\n      {/*        `}*/}\n      {/*      >*/}\n      {/*        <TextInput name={'date'} type={'date'} label={'Date de début'} />*/}\n      {/*      </div>*/}\n      {/*      <h3>Suppléant</h3>*/}\n      {/*      <AddRepresentantComponent onAddRepresentation={() => {}} />*/}\n      {/*      <div*/}\n      {/*        css={css`*/}\n      {/*          margin-top: 20px;*/}\n      {/*        `}*/}\n      {/*      >*/}\n      {/*        <TextInput name={'date'} type={'date'} label={'Date de début'} />*/}\n      {/*      </div>*/}\n      {/*    </div>*/}\n      {/*  </DialogContent>*/}\n      {/*  <DialogActions>*/}\n      {/*    <Button onClick={() => setDisplayPopup(false)} color=\"primary\">*/}\n      {/*      Annuler*/}\n      {/*    </Button>*/}\n      {/*  </DialogActions>*/}\n      {/*</Dialog>*/}\n    </React.Fragment>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport {\n  InstanceId,\n  OrganismeId,\n  RepresentantId\n} from '../../../../domain/ids';\nimport { RepresentationDto } from '../../../../domain/organisme';\nimport { editCommonClasses } from '../EditOrganismeComponent';\nimport { EditRepresentationDragListComponent } from './EditRepresentationDragListComponent';\nimport { HeaderRepresentationsComponent } from './HeaderRepresentationsComponent';\n\nexport const EditRepresentationListComponent = (props: {\n  organismeOrInstanceId: OrganismeId | InstanceId;\n  nombreRepresentants?: number;\n  representations: RepresentationDto[];\n  onNombreRepresentantsChange: (nombre: number | undefined) => void;\n  onAddRepresentation: (representantId: RepresentantId) => Promise<void>;\n}) => {\n  return (\n    <React.Fragment>\n      <h3>Représentants</h3>\n      <div css={editCommonClasses.columnPadding}>\n        <HeaderRepresentationsComponent\n          nombreRepresentants={props.nombreRepresentants}\n          onNombreRepresentantsChange={props.onNombreRepresentantsChange}\n          onAddRepresentation={props.onAddRepresentation}\n        />\n      </div>\n      <EditRepresentationDragListComponent\n        organismeOrInstanceId={props.organismeOrInstanceId}\n        representations={props.representations}\n      />\n      {/*<AddRepresentantComponent*/}\n      {/*  onAddRepresentation={(r: RepresentantDto) =>*/}\n      {/*    props.onAddRepresentation(r, props.organismeId, props.instanceId)*/}\n      {/*  }*/}\n      {/*/>*/}\n    </React.Fragment>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { FormEvent, PropsWithChildren, Ref } from 'react';\n\nexport const SimpleForm = (\n  props: PropsWithChildren<{\n    forwardRef?: Ref<HTMLFormElement>;\n    onSubmit: (data: any) => void;\n  }>\n) => {\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const form = event.currentTarget as HTMLFormElement;\n    const dto: any = {};\n    Array.from(form.elements).forEach(e => {\n      if (e instanceof HTMLInputElement && e.type === 'text') {\n        dto[e.name] = e.value;\n      }\n    });\n    props.onSubmit(dto);\n  };\n\n  return (\n    <form ref={props.forwardRef} onSubmit={onSubmit}>\n      {props.children}\n    </form>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useRef } from 'react';\nimport { SimpleForm } from '../../../base-component/SimpleForm';\nimport { TextInput } from '../../../base-component/TextInput';\n\nexport const AddInstanceComponent = (props: {\n  addInstance: (nom: string) => void;\n}) => {\n  const formRef = useRef<HTMLFormElement>(null);\n  return (\n    <div\n      css={css`\n        display: flex;\n      `}\n    >\n      <div\n        css={css`\n          flex: 25%;\n          font-size: 1rem;\n          text-align: right;\n          padding: 19px 10px 0 0;\n        `}\n      >\n        Ajouter une instance\n      </div>\n      <div\n        css={css`\n          flex: 75%;\n          padding: 8px 6px 0 4px;\n        `}\n      >\n        <SimpleForm\n          forwardRef={formRef}\n          onSubmit={e => {\n            props.addInstance(e.nom);\n          }}\n        >\n          <TextInput name=\"nom\" label=\"Nouvelle instance\" />\n        </SimpleForm>\n      </div>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Add } from '@mui/icons-material';\nimport Button from '@mui/material/Button';\nimport * as React from 'react';\nimport {\n  DeliberationId,\n  InstanceId,\n  OrganismeId,\n  RepresentantId\n} from '../../../domain/ids';\nimport {\n  LienDeliberationDto,\n  OrganismeDto,\n  RepresentationDto\n} from '../../../domain/organisme';\nimport { colors, dimensions } from '../../../styles/vars';\nimport { organismeActions } from '../../../utils/organisme-utils';\nimport { EditDeliberationListComponent } from './deliberation/EditDeliberationListComponent';\nimport { DragAndDropGlobalContext } from './DragAndDropGlobalContext';\nimport { EditNomComponent } from './EditNomComponent';\nimport {\n  EditOrganismeNatureJuridiqueComponent,\n  EditOrganismeSecteurComponent,\n  EditOrganismeTypeStructureComponent\n} from './EditOrganismeCategoryComponent';\nimport { EditInstancesComponent } from './instance/EditInstancesComponent';\nimport { EditRepresentationListComponent } from './representation/EditRepresentationListComponent';\nimport { AddInstanceComponent } from './instance/AddInstanceComponent';\n\n// TODO no ?\nexport const editCommonClasses = {\n  columnPadding: css`\n    padding: 4px;\n  `,\n  border: css`\n    border-radius: 6px;\n  `\n};\n\nconst classes = {\n  categories: css`\n    margin: 4px;\n    @media (min-width: ${dimensions.screenSmMin}px) {\n      width: 33.33%;\n    }\n  `,\n  separator: css`\n    margin: 20px 5%;\n    padding: 0;\n    border: 0;\n    border-top: 1px dashed ${colors.grey2};\n  `,\n  column: css`\n    padding: 0 10px 10px 10px;\n    @media (min-width: ${dimensions.screenSmMin}px) {\n      width: 50%;\n    }\n  `\n};\n\nexport const RepresentantsDeliberationsBlock = (props: {\n  organismeOrInstanceId: OrganismeId | InstanceId;\n  nombreRepresentants: number | undefined;\n  representations: RepresentationDto[];\n  onNombreRepresentantsChange: (nombre: number | undefined) => void;\n  onAddRepresentation: (representantId: RepresentantId) => Promise<void>;\n  lienDeliberations: LienDeliberationDto[];\n  onNewLienDeliberation: (\n    deliberationId: DeliberationId,\n    comment: string | undefined\n  ) => Promise<void>;\n}) => (\n  <div\n    css={css`\n      display: flex;\n      flex-direction: column;\n      @media (min-width: ${dimensions.screenSmMin}px) {\n        flex-direction: row;\n      }\n    `}\n  >\n    <div css={classes.column}>\n      <EditRepresentationListComponent\n        organismeOrInstanceId={props.organismeOrInstanceId}\n        nombreRepresentants={props.nombreRepresentants}\n        representations={props.representations}\n        onNombreRepresentantsChange={props.onNombreRepresentantsChange}\n        onAddRepresentation={props.onAddRepresentation}\n      />\n    </div>\n    <div\n      css={css`\n        width: 0;\n        border-left: 1px dashed ${colors.grey2};\n        margin: 30px 20px;\n      `}\n    />\n    <div css={classes.column}>\n      <EditDeliberationListComponent\n        lienDeliberations={props.lienDeliberations}\n        onNewLienDeliberation={props.onNewLienDeliberation}\n      />\n    </div>\n  </div>\n);\n\nexport const EditOrganismeComponent = (props: {\n  organisme: OrganismeDto;\n  setOrganisme: (o: OrganismeDto) => void;\n}) => {\n  const organisme = props.organisme;\n  const actions = organismeActions(organisme, props.setOrganisme);\n  return (\n    <DragAndDropGlobalContext\n      onMoveRepresentation={actions.onMoveRepresentation}\n    >\n      <div\n        css={css`\n          width: 100%;\n        `}\n      >\n        <EditNomComponent\n          kind={'organisme'}\n          nom={organisme.nom}\n          onUpdateNom={actions.onOrganismeNomChange}\n          onUpdateStatus={actions.onOrganismeStatusUpdate}\n          titleElement={\n            <h2\n              css={css`\n                font-size: 2rem;\n                font-weight: bold;\n              `}\n            >\n              {/* eslint-disable-line jsx-a11y/heading-has-content */}\n            </h2>\n          }\n        />\n        <div\n          css={css`\n            display: flex;\n            flex-direction: column;\n            @media (min-width: ${dimensions.screenSmMin}px) {\n              flex-direction: row;\n            }\n          `}\n        >\n          <div css={classes.categories}>\n            <EditOrganismeNatureJuridiqueComponent\n              natureJuridiqueId={organisme.natureJuridiqueId}\n              onChange={actions.onNatureJuridiqueChange}\n            />\n          </div>\n          <div css={classes.categories}>\n            <EditOrganismeSecteurComponent\n              secteurId={organisme.secteurId}\n              onChange={actions.onSecteurChange}\n            />\n          </div>\n          <div css={classes.categories}>\n            <EditOrganismeTypeStructureComponent\n              typeStructureId={organisme.typeStructureId}\n              onChange={actions.onTypeStructureChange}\n            />\n          </div>\n        </div>\n        <hr css={classes.separator} />\n        <div\n          css={css`\n            margin-top: 20px;\n          `}\n        >\n          <RepresentantsDeliberationsBlock\n            organismeOrInstanceId={organisme.id}\n            nombreRepresentants={organisme.nombreRepresentants}\n            representations={organisme.representations}\n            onNombreRepresentantsChange={(nombre: number | undefined) =>\n              actions.onNombreRepresentantsChange(undefined, nombre)\n            }\n            onAddRepresentation={(representantId: RepresentantId) =>\n              actions.onAddRepresentation(\n                representantId,\n                organisme.id,\n                undefined\n              )\n            }\n            lienDeliberations={organisme.lienDeliberations}\n            onNewLienDeliberation={(\n              deliberationId: DeliberationId,\n              comment: string | undefined\n            ) =>\n              actions.onNewLienDeliberation(undefined, deliberationId, comment)\n            }\n          />\n        </div>\n        <hr css={classes.separator} />\n        {/*<div*/}\n        {/*  css={css`*/}\n        {/*    padding: 0 0 0 40px;*/}\n        {/*  `}*/}\n        {/*>*/}\n        {/*  <Button*/}\n        {/*    startIcon={<Add />}*/}\n        {/*    variant=\"outlined\"*/}\n        {/*    color=\"primary\"*/}\n        {/*    size=\"small\"*/}\n        {/*  >*/}\n        {/*    Ajouter une instance*/}\n        {/*  </Button>*/}\n        {/*</div>*/}\n        <AddInstanceComponent addInstance={actions.onAddInstance} />\n        {organisme.instances.length !== 0 && (\n          <div\n            css={css`\n              margin: 0 20px;\n            `}\n          >\n            <EditInstancesComponent\n              instances={organisme.instances}\n              onNomChange={actions.onInstanceNomChange}\n              onStatusChange={actions.onInstanceStatusChange}\n              onNombreRepresentantsChange={actions.onNombreRepresentantsChange}\n              onAddRepresentation={(\n                representantId: RepresentantId,\n                instanceId: InstanceId\n              ) =>\n                actions.onAddRepresentation(\n                  representantId,\n                  organisme.id,\n                  instanceId\n                )\n              }\n              onNewLienDeliberation={actions.onNewLienDeliberation}\n            />\n          </div>\n        )}\n      </div>\n    </DragAndDropGlobalContext>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { ArrowBackIos } from '@mui/icons-material';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { appContext } from '../ApplicationContext';\nimport { EditOrganismeComponent } from '../component/organisme/edit/EditOrganismeComponent';\nimport { MainContainer } from '../container/MainContainer';\nimport { OrganismeDto } from '../domain/organisme';\nimport { LoadingState } from '../interfaces';\nimport { RouteLink } from '../routing/RouteLink';\nimport { EditOrganismeRoute } from '../routing/routes';\nimport { assertUnreachable } from '../utils';\n\nconst displayLoading = (loading: LoadingState) => {\n  switch (loading) {\n    case 'loading':\n      return <div>Chargement...</div>;\n    case 'idle':\n      return null;\n    case 'error':\n      return <div>Erreur de chargement</div>;\n    default:\n      assertUnreachable(loading);\n  }\n};\n\nexport const EditOrganismeView = (props: {\n  routeParams: EditOrganismeRoute;\n}) => {\n  const [organisme, setOrganisme] = useState<OrganismeDto | undefined>();\n  const [loading, setLoading] = useState<LoadingState>('idle');\n  useEffect(() => {\n    setOrganisme(undefined);\n    setLoading('loading');\n    const exec = async () => {\n      const organisme = await appContext\n        .queryService()\n        .getOrganismeQuery({ id: props.routeParams.id })\n        .then(r => r.organisme)\n        .catch(() => setLoading('error'));\n      if (!organisme) {\n        return;\n      }\n      setLoading('idle');\n      // const representationsMap = doRepresentationsMap(organisme);\n      // const organismeSuppleances = doOrganismeSuppleances(organisme);\n      setOrganisme(organisme);\n    };\n    exec();\n  }, [props.routeParams.id]);\n  return (\n    <MainContainer>\n      <RouteLink route={{ name: 'ListOrganismesRoute' }}>\n        <span\n          css={css`\n            top: 6px;\n            font-size: 10px;\n          `}\n        >\n          <ArrowBackIos fontSize=\"small\" />\n        </span>{' '}\n        Retour liste des organismes\n      </RouteLink>\n      {displayLoading(loading)}\n      {organisme && (\n        <EditOrganismeComponent\n          organisme={organisme}\n          setOrganisme={setOrganisme}\n        />\n      )}\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport FormControl from '@mui/material/FormControl';\nimport IconButton from '@mui/material/IconButton';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport InputLabel from '@mui/material/InputLabel';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { clientUid } from '../../utils';\nimport { asString } from '../../utils/nominal-class';\n\n// [doc] material password input doesn't send its value in a classic form\n// submission... so we have to use a hook to get the value\nexport const PasswordInput = (props: {\n  label: string;\n  value: string;\n  setValue: (value: string) => void;\n}) => {\n  const [id] = useState(clientUid());\n  const [showPassword, setShowPassword] = useState(false);\n  const toggleShowPassword = () => setShowPassword(!showPassword);\n  const handleMouseDownPassword = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    event.preventDefault();\n  };\n  return (\n    <FormControl variant=\"outlined\" size=\"small\" fullWidth={true}>\n      <InputLabel htmlFor={asString(id)}>{props.label}</InputLabel>\n      <OutlinedInput\n        id={asString(id)}\n        type={showPassword ? 'text' : 'password'}\n        value={props.value}\n        onChange={e => props.setValue(e.target.value)}\n        // keep for animation\n        label={props.label}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={toggleShowPassword}\n              onMouseDown={handleMouseDownPassword}\n              edge=\"end\"\n            >\n              {showPassword ? <Visibility /> : <VisibilityOff />}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n    </FormControl>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@mui/material';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { PasswordInput } from '../component/base-component/PasswordInput';\nimport { SimpleForm } from '../component/base-component/SimpleForm';\nimport { TextInput } from '../component/base-component/TextInput';\n\nexport interface LoginFormDto {\n  login: string;\n  password: string;\n}\n\ninterface Props {\n  onSubmit: (dto: LoginFormDto) => void;\n}\n\nexport const LoginForm = (props: Props) => {\n  const [password, setPassword] = useState('');\n  return (\n    <SimpleForm\n      onSubmit={(dto: { login: string }) =>\n        props.onSubmit({\n          login: dto.login,\n          password\n        })\n      }\n    >\n      <div\n        css={css`\n          margin: 10px 0;\n        `}\n      >\n        <TextInput name={'login'} label={'E-mail'} />\n      </div>\n      <div\n        css={css`\n          margin: 10px 0;\n        `}\n      >\n        <PasswordInput\n          label=\"Mot de passe\"\n          value={password}\n          setValue={setPassword}\n        />\n      </div>\n      <Button type=\"submit\" variant=\"contained\">\n        Se connecter\n      </Button>\n    </SimpleForm>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { OrganismeDto } from '../../domain/organisme';\n\nexport const OrganismeComponent = (props: { organisme: OrganismeDto }) => {\n  return (\n    <div\n      css={css`\n        width: 100%;\n      `}\n    ></div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@mui/material';\nimport * as React from 'react';\nimport { ChangeEvent, useState } from 'react';\nimport { appContext } from '../ApplicationContext';\nimport { PasswordInput } from '../component/base-component/PasswordInput';\nimport { SimpleForm } from '../component/base-component/SimpleForm';\nimport { TextInput } from '../component/base-component/TextInput';\n\nexport interface RegisterFormDto {\n  mail: string;\n  password: string;\n  displayName: string;\n}\n\ninterface Props {\n  onSubmit: (dto: RegisterFormDto) => void;\n}\n\nexport const RegisterForm = (props: Props) => {\n  const [mailIsAlreadyTaken, setMailIsAlreadyTaken] = useState(false);\n  const [password, setPassword] = useState('');\n  const checkLoginAvailability = (event: ChangeEvent<HTMLInputElement>) => {\n    const login = event.target.value;\n    appContext\n      .queryService()\n      .isLoginAlreadyTakenQuery({ login })\n      .then(r => {\n        setMailIsAlreadyTaken(r.alreadyTaken);\n      });\n  };\n  return (\n    <SimpleForm\n      onSubmit={(dto: { mail: string; displayName: string }) =>\n        props.onSubmit({\n          mail: dto.mail,\n          password,\n          displayName: dto.displayName\n        })\n      }\n    >\n      <div\n        css={css`\n          margin: 10px 0;\n        `}\n      >\n        <TextInput\n          name=\"mail\"\n          label={'E-mail'}\n          onChange={checkLoginAvailability}\n        />\n      </div>\n      {mailIsAlreadyTaken && (\n        <div\n          css={css`\n            margin: 10px 0;\n          `}\n        >\n          L'e-mail est déjà pris\n        </div>\n      )}\n      <div\n        css={css`\n          margin: 10px 0;\n        `}\n      >\n        <PasswordInput\n          label=\"Mode de passe\"\n          value={password}\n          setValue={setPassword}\n        />\n      </div>\n      <div\n        css={css`\n          margin: 10px 0;\n        `}\n      >\n        <TextInput\n          name=\"displayName\"\n          label={'Nom affiché'}\n          onChange={checkLoginAvailability}\n        />\n      </div>\n      <Button type=\"submit\">Créer le compte</Button>\n    </SimpleForm>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport { OrganismeId, SecteurId } from '../domain/ids';\nimport { Role } from '../domain/user';\nimport { EditNatureJuridiquesView } from '../view/EditNatureJuridiquesView';\nimport { EditOrganismeView } from '../view/EditOrganismeView';\nimport { EditSecteursView } from '../view/EditSecteursView';\nimport { EditTypeStructuresView } from '../view/EditTypeStructuresView';\nimport { ListOrganismesBySecteurView } from '../view/ListOrganismesBySecteurView';\nimport { ListOrganismesView } from '../view/ListOrganismesView';\nimport { LoginView } from '../view/LoginView';\nimport { OrganismeView } from '../view/OrganismeView';\nimport { RegisterView } from '../view/RegisterView';\nimport { RootView } from '../view/RootView';\n\nexport type Route =\n  | EditNatureJuridiquesRoute\n  | EditOrganismeRoute\n  | EditSecteursRoute\n  | EditTypeStructuresRoute\n  | ListOrganismesBySecteurRoute\n  | ListOrganismesRoute\n  | LoginRoute\n  | OrganismeRoute\n  | RegisterRoute\n  | RootRoute;\n\ninterface ViewParameters<R extends Route> {\n  routeParams: R;\n}\n\ninterface RouteProps {\n  path: string;\n  component: FunctionComponent<ViewParameters<any>>;\n  role?: Role;\n  onEnter?: () => void;\n}\n\nexport const routes: Record<Route['name'], RouteProps> = {\n  EditNatureJuridiquesRoute: {\n    path: '/edition-nature-juridiques',\n    component: EditNatureJuridiquesView,\n    role: 'user'\n  },\n  EditOrganismeRoute: {\n    path: '/edition-organisme/:id',\n    component: EditOrganismeView,\n    role: 'user'\n  },\n  EditSecteursRoute: {\n    path: '/edition-secteurs',\n    component: EditSecteursView,\n    role: 'user'\n  },\n  EditTypeStructuresRoute: {\n    path: '/edition-type-structures',\n    component: EditTypeStructuresView,\n    role: 'user'\n  },\n  ListOrganismesBySecteurRoute: {\n    path: '/organismes-par-secteur/:secteurId',\n    component: ListOrganismesBySecteurView\n  },\n  ListOrganismesRoute: {\n    path: '/organismes',\n    component: ListOrganismesView\n  },\n  LoginRoute: {\n    path: '/login',\n    component: LoginView\n  },\n  OrganismeRoute: {\n    path: '/organisme/:id',\n    component: OrganismeView\n  },\n  RegisterRoute: {\n    path: '/register',\n    component: RegisterView\n  },\n  RootRoute: {\n    path: '/',\n    component: RootView\n  }\n};\n\nexport interface EditNatureJuridiquesRoute {\n  name: 'EditNatureJuridiquesRoute';\n}\n\nexport interface EditOrganismeRoute {\n  name: 'EditOrganismeRoute';\n  id: OrganismeId;\n}\n\nexport interface EditSecteursRoute {\n  name: 'EditSecteursRoute';\n}\n\nexport interface EditTypeStructuresRoute {\n  name: 'EditTypeStructuresRoute';\n}\n\nexport interface ListOrganismesBySecteurRoute {\n  name: 'ListOrganismesBySecteurRoute';\n  secteurId: SecteurId;\n}\n\ninterface ListOrganismesRoute {\n  name: 'ListOrganismesRoute';\n}\n\ninterface LoginRoute {\n  name: 'LoginRoute';\n}\n\ninterface OrganismeRoute {\n  name: 'OrganismeRoute';\n  id: OrganismeId;\n}\n\ninterface RegisterRoute {\n  name: 'RegisterRoute';\n}\n\ninterface RootRoute {\n  name: 'RootRoute';\n}\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { appContext } from '../ApplicationContext';\nimport { EditCategoriesComponent } from '../component/category/EditCategoriesComponent';\nimport { MainContainer } from '../container/MainContainer';\nimport { NatureJuridique } from '../domain/bootstrap-data';\nimport { NatureJuridiqueId } from '../domain/ids';\nimport { ItemStatus } from '../domain/organisme';\nimport { Errors } from '../errors';\nimport { state } from '../state/state';\nimport { compareByString } from '../utils';\n\nexport const EditNatureJuridiquesView = () => {\n  const [natureJuridiques, setNatureJuridiques] = useRecoilState(\n    state.natureJuridiques\n  );\n  const addNatureJuridique = (libelle: string, then: () => void) => {\n    appContext\n      .commandService()\n      .createNatureJuridiqueCommand({\n        libelle\n      })\n      .then(r => {\n        const newNatureJuridique: NatureJuridique = {\n          id: r.id,\n          libelle,\n          status: 'live'\n        };\n        setNatureJuridiques(\n          [...natureJuridiques, newNatureJuridique].sort(\n            compareByString(i => i.libelle)\n          )\n        );\n        then();\n      });\n  };\n  const updateNatureJuridique = (\n    natureJuridiqueId: NatureJuridiqueId,\n    libelle: string,\n    then: () => void\n  ) => {\n    if (!natureJuridiques) {\n      throw Errors._c0c89407();\n    }\n    appContext\n      .commandService()\n      .updateNatureJuridiqueLibelleCommand({\n        id: natureJuridiqueId,\n        libelle\n      })\n      .then(() => {\n        setNatureJuridiques(\n          natureJuridiques\n            .map(s => (s.id === natureJuridiqueId ? { ...s, libelle } : s))\n            .sort(compareByString(i => i.libelle))\n        );\n        then();\n      });\n  };\n  const onUpdateStatus = (\n    id: NatureJuridiqueId,\n    status: ItemStatus,\n    then: () => void\n  ) => {\n    appContext\n      .commandService()\n      .updateNatureJuridiqueStatusCommand({\n        id,\n        status\n      })\n      .then(() => {\n        setNatureJuridiques(\n          natureJuridiques.map(s => (s.id === id ? { ...s, status } : s))\n        );\n        then();\n      });\n  };\n  return (\n    <MainContainer>\n      <div\n        css={css`\n          padding: 0 20px;\n        `}\n      >\n        <h1>Édition des natures juridiques</h1>\n        {natureJuridiques && (\n          <EditCategoriesComponent\n            kind={'natureJuridique'}\n            categories={natureJuridiques}\n            onAdd={addNatureJuridique}\n            onChange={updateNatureJuridique}\n            onUpdateStatus={onUpdateStatus}\n          />\n        )}\n      </div>\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { appContext } from '../ApplicationContext';\nimport { EditCategoriesComponent } from '../component/category/EditCategoriesComponent';\nimport { MainContainer } from '../container/MainContainer';\nimport { Secteur } from '../domain/bootstrap-data';\nimport { SecteurId } from '../domain/ids';\nimport { ItemStatus } from '../domain/organisme';\nimport { Errors } from '../errors';\nimport { state } from '../state/state';\nimport { compareByString } from '../utils';\n\nexport const EditSecteursView = () => {\n  const [secteurs, setSecteurs] = useRecoilState(state.secteurs);\n  const addSecteur = (libelle: string, then: () => void) => {\n    appContext\n      .commandService()\n      .createSecteurCommand({\n        libelle\n      })\n      .then(r => {\n        const newSecteur: Secteur = { id: r.id, libelle, status: 'live' };\n        setSecteurs(\n          [...secteurs, newSecteur].sort(compareByString(i => i.libelle))\n        );\n        then();\n      });\n  };\n  const updateSecteur = (\n    secteurId: SecteurId,\n    libelle: string,\n    then: () => void\n  ) => {\n    if (!secteurs) {\n      throw Errors._c0c89407();\n    }\n    appContext\n      .commandService()\n      .updateSecteurLibelleCommand({\n        id: secteurId,\n        libelle\n      })\n      .then(() => {\n        setSecteurs(\n          secteurs\n            .map(s => (s.id === secteurId ? { ...s, libelle } : s))\n            .sort(compareByString(i => i.libelle))\n        );\n        then();\n      });\n  };\n  const onUpdateStatus = (\n    id: SecteurId,\n    status: ItemStatus,\n    then: () => void\n  ) => {\n    appContext\n      .commandService()\n      .updateSecteurStatusCommand({\n        id,\n        status\n      })\n      .then(() => {\n        setSecteurs(secteurs.map(s => (s.id === id ? { ...s, status } : s)));\n        then();\n      });\n  };\n  return (\n    <MainContainer>\n      <div\n        css={css`\n          padding: 0 20px;\n        `}\n      >\n        <h1>Édition des secteurs</h1>\n        {secteurs && (\n          <EditCategoriesComponent\n            kind={'secteur'}\n            categories={secteurs}\n            onAdd={addSecteur}\n            onChange={updateSecteur}\n            onUpdateStatus={onUpdateStatus}\n          />\n        )}\n      </div>\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { appContext } from '../ApplicationContext';\nimport { EditCategoriesComponent } from '../component/category/EditCategoriesComponent';\nimport { MainContainer } from '../container/MainContainer';\nimport { TypeStructure } from '../domain/bootstrap-data';\nimport { TypeStructureId } from '../domain/ids';\nimport { ItemStatus } from '../domain/organisme';\nimport { Errors } from '../errors';\nimport { state } from '../state/state';\nimport { compareByString } from '../utils';\n\nexport const EditTypeStructuresView = () => {\n  const [typeStructures, setTypeStructures] = useRecoilState(\n    state.typeStructures\n  );\n  const addTypeStructure = (libelle: string, then: () => void) => {\n    appContext\n      .commandService()\n      .createTypeStructureCommand({\n        libelle\n      })\n      .then(r => {\n        const newTypeStructure: TypeStructure = {\n          id: r.id,\n          libelle,\n          status: 'live'\n        };\n        setTypeStructures(\n          [...typeStructures, newTypeStructure].sort(\n            compareByString(i => i.libelle)\n          )\n        );\n        then();\n      });\n  };\n  const updateTypeStructure = (\n    typeStructureId: TypeStructureId,\n    libelle: string,\n    then: () => void\n  ) => {\n    if (!typeStructures) {\n      throw Errors._c0c89407();\n    }\n    appContext\n      .commandService()\n      .updateTypeStructureLibelleCommand({\n        id: typeStructureId,\n        libelle\n      })\n      .then(() => {\n        setTypeStructures(\n          typeStructures\n            .map(s => (s.id === typeStructureId ? { ...s, libelle } : s))\n            .sort(compareByString(i => i.libelle))\n        );\n        then();\n      });\n  };\n  const onUpdateStatus = (\n    id: TypeStructureId,\n    status: ItemStatus,\n    then: () => void\n  ) => {\n    appContext\n      .commandService()\n      .updateTypeStructureStatusCommand({\n        id,\n        status\n      })\n      .then(() => {\n        setTypeStructures(\n          typeStructures.map(s => (s.id === id ? { ...s, status } : s))\n        );\n        then();\n      });\n  };\n  return (\n    <MainContainer>\n      <div\n        css={css`\n          padding: 0 20px;\n        `}\n      >\n        <h1>Édition des type de structure</h1>\n        {typeStructures && (\n          <EditCategoriesComponent\n            kind={'typeStructure'}\n            categories={typeStructures}\n            onAdd={addTypeStructure}\n            onChange={updateTypeStructure}\n            onUpdateStatus={onUpdateStatus}\n          />\n        )}\n      </div>\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@mui/material';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { appContext } from '../ApplicationContext';\nimport { SimpleForm } from '../component/base-component/SimpleForm';\nimport { TextInput } from '../component/base-component/TextInput';\nimport { MainContainer } from '../container/MainContainer';\nimport { OrganismeListDto } from '../domain/organisme';\nimport { RouteLink } from '../routing/RouteLink';\nimport { ListOrganismesBySecteurRoute } from '../routing/routes';\nimport { state } from '../state/state';\nimport { colors } from '../styles/vars';\nimport { asString, getValue } from '../utils/nominal-class';\n\nexport const ListOrganismesBySecteurView = (props: {\n  routeParams: ListOrganismesBySecteurRoute;\n}) => {\n  const [organismes, setOrganismes] = useState<OrganismeListDto[] | undefined>(\n    undefined\n  );\n  const secteurById = useRecoilValue(state.secteursById);\n  const secteur = getValue(secteurById, props.routeParams.secteurId);\n  useEffect(() => {\n    appContext\n      .queryService()\n      .listOrganismesBySecteurQuery({\n        secteurId: props.routeParams.secteurId\n      })\n      .then(r => {\n        setOrganismes(r.organismes);\n      });\n  }, [props.routeParams.secteurId]);\n  const newOrganismeOnSubmit = (dto: { nom: string }) => {\n    if (dto.nom !== '') {\n      appContext\n        .commandService()\n        .createOrganismeCommand(dto)\n        .then(r => {\n          appContext.applicationHistory().goTo({\n            name: 'EditOrganismeRoute',\n            id: r.id\n          });\n        });\n    }\n  };\n  return (\n    <MainContainer>\n      <h1>{secteur.libelle}</h1>\n      <SimpleForm onSubmit={newOrganismeOnSubmit}>\n        <TextInput name=\"nom\" label=\"Nouvel organisme\" />\n        <Button type=\"submit\" color=\"primary\">\n          ok\n        </Button>\n      </SimpleForm>\n      {!organismes && <div>Chargement...</div>}\n      {organismes &&\n        organismes.map(o => (\n          <div\n            key={asString(o.id)}\n            css={css`\n              background: ${colors.clearGrey};\n              margin: 2px 0;\n              padding: 4px;\n            `}\n          >\n            <h2>{o.nom}</h2>\n            {/*<RouteLink route={{ name: 'OrganismeRoute', id: o.id }}>*/}\n            {/*  view*/}\n            {/*</RouteLink>*/}\n            {/*<br />*/}\n            <RouteLink route={{ name: 'EditOrganismeRoute', id: o.id }}>\n              Éditer\n            </RouteLink>\n          </div>\n        ))}\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@mui/material';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { appContext } from '../ApplicationContext';\nimport { SimpleForm } from '../component/base-component/SimpleForm';\nimport { TextInput } from '../component/base-component/TextInput';\nimport { MainContainer } from '../container/MainContainer';\nimport { OrganismeListDto } from '../domain/organisme';\nimport { RouteLink } from '../routing/RouteLink';\nimport { colors } from '../styles/vars';\nimport { asString } from '../utils/nominal-class';\n\nexport const ListOrganismesView = () => {\n  const [organismes, setOrganismes] = useState<OrganismeListDto[] | undefined>(\n    undefined\n  );\n  useEffect(() => {\n    appContext\n      .queryService()\n      .listOrganismesQuery()\n      .then(r => {\n        setOrganismes(r.organismes);\n      });\n  }, []);\n  const newOrganismeOnSubmit = (dto: { nom: string }) => {\n    if (dto.nom !== '') {\n      appContext\n        .commandService()\n        .createOrganismeCommand(dto)\n        .then(r => {\n          appContext.applicationHistory().goTo({\n            name: 'EditOrganismeRoute',\n            id: r.id\n          });\n        });\n    }\n  };\n  return (\n    <MainContainer>\n      <h1>Liste des organismes</h1>\n      {/*<Button*/}\n      {/*  startIcon={<Add />}*/}\n      {/*  variant=\"outlined\"*/}\n      {/*  color=\"primary\"*/}\n      {/*  size=\"small\"*/}\n      {/*>*/}\n      {/*  Ajouter un organisme*/}\n      {/*</Button>*/}\n      <SimpleForm onSubmit={newOrganismeOnSubmit}>\n        <TextInput name=\"nom\" label=\"Nouvel organisme\" />\n        <Button type=\"submit\" color=\"primary\">\n          ok\n        </Button>\n      </SimpleForm>\n      {!organismes && <div>Chargement...</div>}\n      {organismes &&\n        organismes.map(o => (\n          <div\n            key={asString(o.id)}\n            css={css`\n              background: ${colors.clearGrey};\n              margin: 2px 0;\n              padding: 4px;\n            `}\n          >\n            <h2>{o.nom}</h2>\n            {/*<RouteLink route={{ name: 'OrganismeRoute', id: o.id }}>*/}\n            {/*  view*/}\n            {/*</RouteLink>*/}\n            {/*<br />*/}\n            <RouteLink route={{ name: 'EditOrganismeRoute', id: o.id }}>\n              Éditer\n            </RouteLink>\n          </div>\n        ))}\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport Button from '@mui/material/Button';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { appContext } from '../ApplicationContext';\nimport { MainContainer } from '../container/MainContainer';\nimport { LoginResult } from '../domain/user';\nimport { Errors } from '../errors';\nimport { LoginForm, LoginFormDto } from '../form/LoginForm';\nimport { RouteLink } from '../routing/RouteLink';\nimport { state } from '../state/state';\nimport { assertUnreachable } from '../utils';\n\nexport const LoginView = () => {\n  const [userInfos, setUserInfos] = useRecoilState(state.userInfos);\n  const [loginResult, setLoginResult] = useState<LoginResult | undefined>(\n    undefined\n  );\n  const login = (data: LoginFormDto) => {\n    appContext\n      .commandService()\n      .loginCommand(data)\n      .then(r => {\n        setLoginResult(r.result);\n        switch (r.result) {\n          case 'loggedIn':\n            if (!r.userinfos) {\n              throw Errors._198c103e();\n            }\n            appContext.csrfTokenService().refreshToken();\n            setUserInfos(r.userinfos);\n            appContext.applicationHistory().goTo({ name: 'RootRoute' });\n            break;\n          case 'userNotFound':\n          case 'badPassword':\n            break;\n          default:\n            assertUnreachable(r.result);\n        }\n      });\n  };\n  return (\n    <MainContainer>\n      <div\n        css={css`\n          display: flex;\n          justify-content: center;\n        `}\n      >\n        <div>\n          <h1\n            css={css`\n              text-align: center;\n            `}\n          >\n            Identification\n          </h1>\n          <div\n            css={css`\n              width: 400px;\n            `}\n          >\n            {loginResult !== 'loggedIn' && !userInfos && (\n              <LoginForm onSubmit={login} />\n            )}\n            {!userInfos && bootstrapData.env === 'dev' && (\n              <div\n                css={css`\n                  margin-top: 20px;\n                `}\n              >\n                dev user authent :{' '}\n                <Button\n                  onClick={() =>\n                    login({\n                      login: 'user',\n                      password: 'user'\n                    })\n                  }\n                >\n                  user\n                </Button>\n                <Button\n                  onClick={() =>\n                    login({\n                      login: 'admin',\n                      password: 'admin'\n                    })\n                  }\n                >\n                  admin\n                </Button>\n              </div>\n            )}\n            {userInfos && (\n              <div\n                css={css`\n                  text-align: center;\n                `}\n              >\n                Vous êtes connecté\n                <br />\n                <RouteLink\n                  route={{\n                    name: 'ListOrganismesRoute'\n                  }}\n                >\n                  Liste des organismes\n                </RouteLink>\n              </div>\n            )}\n            {loginResult && (\n              <div\n                css={css`\n                  text-align: center;\n                  margin-top: 20px;\n                `}\n              >\n                {(() => {\n                  switch (loginResult) {\n                    case 'loggedIn':\n                      return null;\n                    case 'userNotFound':\n                      return <div>Utilisateur non trouvé</div>;\n                    case 'badPassword':\n                      return <div>Mauvais mot de passe</div>;\n                    default:\n                      assertUnreachable(loginResult);\n                  }\n                })()}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { appContext } from '../ApplicationContext';\nimport { OrganismeComponent } from '../component/organisme/OrganismeComponent';\nimport { MainContainer } from '../container/MainContainer';\nimport { OrganismeDto } from '../domain/organisme';\nimport { RouteLink } from '../routing/RouteLink';\nimport { EditOrganismeRoute } from '../routing/routes';\n\nexport const OrganismeView = (props: { routeParams: EditOrganismeRoute }) => {\n  const [organisme, setOrganisme] = useState<OrganismeDto | undefined>(\n    undefined\n  );\n  useEffect(() => {\n    appContext\n      .queryService()\n      .getOrganismeQuery({ id: props.routeParams.id })\n      .then(r => {\n        setOrganisme(r.organisme);\n      });\n  }, [props.routeParams.id]);\n  return (\n    <MainContainer>\n      <RouteLink route={{ name: 'ListOrganismesRoute' }}>list</RouteLink>\n      {!organisme && <div>Chargement...</div>}\n      {organisme && <OrganismeComponent organisme={organisme} />}\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { appContext } from '../ApplicationContext';\nimport { MainContainer } from '../container/MainContainer';\nimport { RegisterCommand } from '../domain/commands';\nimport { RegisterResult } from '../domain/user';\nimport { Errors } from '../errors';\nimport { RegisterForm, RegisterFormDto } from '../form/RegisterForm';\nimport { RouteLink } from '../routing/RouteLink';\nimport { state } from '../state/state';\nimport { assertUnreachable } from '../utils';\n\nexport const RegisterView = () => {\n  const [userInfos, setUserInfos] = useRecoilState(state.userInfos);\n  const [registerResult, setRegisterResult] = useState<\n    RegisterResult | undefined\n  >(undefined);\n  const register = (registerInput: RegisterFormDto) => {\n    const registerCommand: RegisterCommand = registerInput;\n    appContext\n      .commandService()\n      .registerCommand(registerCommand)\n      .then(r => {\n        switch (r.result) {\n          case 'registered':\n            if (!r.userinfos) {\n              throw Errors._db434940();\n            }\n            appContext.csrfTokenService().refreshToken();\n            setUserInfos(r.userinfos);\n            break;\n          case 'mailAlreadyExists':\n            break;\n          default:\n            assertUnreachable(r.result);\n        }\n        setRegisterResult(r.result);\n      });\n  };\n  return (\n    <MainContainer>\n      <div\n        css={css`\n          display: flex;\n          justify-content: center;\n        `}\n      >\n        <div>\n          <h1\n            css={css`\n              text-align: center;\n            `}\n          >\n            Inscription\n          </h1>\n          <div\n            css={css`\n              width: 400px;\n            `}\n          >\n            {registerResult !== 'registered' && !userInfos && (\n              <RegisterForm onSubmit={register} />\n            )}\n            {userInfos && (\n              <div\n                css={css`\n                  text-align: center;\n                `}\n              >\n                Vous êtes connecté\n                <br />\n                <RouteLink\n                  route={{\n                    name: 'ListOrganismesRoute'\n                  }}\n                >\n                  Liste des organismes\n                </RouteLink>\n              </div>\n            )}\n            {registerResult === 'mailAlreadyExists' && (\n              <div\n                css={css`\n                  text-align: center;\n                `}\n              >\n                Il existe déjà un compte avec cet email\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { MainContainer } from '../container/MainContainer';\nimport { RouteLink } from '../routing/RouteLink';\nimport { state } from '../state/state';\nimport { asString } from '../utils/nominal-class';\n\nexport const RootView = () => {\n  const [userInfos] = useRecoilState(state.userInfos);\n  const [secteurs] = useRecoilState(state.secteurs);\n  return (\n    <MainContainer>\n      {!userInfos && (\n        <RouteLink\n          route={{\n            name: 'LoginRoute'\n          }}\n        >\n          Se connecter\n        </RouteLink>\n      )}\n      {userInfos && (\n        <div>\n          <RouteLink\n            route={{\n              name: 'ListOrganismesRoute'\n            }}\n          >\n            Tous les organismes\n          </RouteLink>\n          <br />\n          <RouteLink\n            route={{\n              name: 'EditSecteursRoute'\n            }}\n          >\n            Édition des secteurs\n          </RouteLink>\n          <br />\n          <RouteLink\n            route={{\n              name: 'EditNatureJuridiquesRoute'\n            }}\n          >\n            Édition des natures juridiques\n          </RouteLink>\n          <br />\n          <RouteLink\n            route={{\n              name: 'EditTypeStructuresRoute'\n            }}\n          >\n            Édition des types de structure\n          </RouteLink>\n          <h3>Par secteur</h3>\n          {secteurs.map(s => (\n            <div key={asString(s.id)}>\n              <RouteLink\n                route={{\n                  name: 'ListOrganismesBySecteurRoute',\n                  secteurId: s.id\n                }}\n              >\n                {s.libelle}\n              </RouteLink>\n            </div>\n          ))}\n        </div>\n      )}\n    </MainContainer>\n  );\n};\n","import * as history from 'history';\nimport { Route, routes } from './routes';\n\nexport class ApplicationHistory {\n  private _browserHistory = history.createBrowserHistory();\n\n  public get browserHistory() {\n    return this._browserHistory;\n  }\n\n  public goTo(route: Route) {\n    this._browserHistory.push(this.buildPath(route));\n  }\n\n  public goToReplace(route: Route) {\n    this._browserHistory.replace(this.buildPath(route));\n  }\n\n  public buildPath(route: Route): string {\n    let path = routes[route.name].path;\n    Object.keys(route)\n      .filter(k => k !== 'name')\n      .forEach((k: string) => {\n        // @ts-ignore\n        const param = route[k];\n        if (path.indexOf(k) === -1) {\n          throw Error(`Missing parameter ${k} in ${path}.`);\n        }\n        path = path.replace(':' + k, param);\n      });\n    return path;\n  }\n}\n","import { appContext } from '../ApplicationContext';\nimport {\n  AddInstanceCommand,\n  AddInstanceCommandResponse,\n  AddLienDeliberationCommand,\n  AddLienDeliberationCommandResponse,\n  AddRepresentationCommand,\n  AddRepresentationCommandResponse,\n  CreateDeliberationCommand,\n  CreateDeliberationCommandResponse,\n  CreateNatureJuridiqueCommand,\n  CreateNatureJuridiqueCommandResponse,\n  CreateOrganismeCommand,\n  CreateOrganismeCommandResponse,\n  CreateRepresentantCommand,\n  CreateRepresentantCommandResponse,\n  CreateSecteurCommand,\n  CreateSecteurCommandResponse,\n  CreateTypeStructureCommand,\n  CreateTypeStructureCommandResponse,\n  LoginCommand,\n  LoginCommandResponse,\n  MoveRepresentationCommand,\n  RegisterCommand,\n  RegisterCommandResponse,\n  UpdateInstanceNombreRepresentantsCommand,\n  UpdateInstanceNomCommand,\n  UpdateInstanceStatusCommand,\n  UpdateNatureJuridiqueLibelleCommand,\n  UpdateNatureJuridiqueStatusCommand,\n  UpdateOrganismeNatureJuridiqueCommand,\n  UpdateOrganismeNombreRepresentantsCommand,\n  UpdateOrganismeNomCommand,\n  UpdateOrganismePartageRepresentantsCommand,\n  UpdateOrganismeSecteurCommand,\n  UpdateOrganismeStatus,\n  UpdateOrganismeTypeStructureCommand,\n  UpdateRepresentationStatusCommand,\n  UpdateSecteurLibelleCommand,\n  UpdateSecteurStatusCommand,\n  UpdateTypeStructureLibelleCommand,\n  UpdateTypeStructureStatusCommand\n} from '../domain/commands';\n\nexport class CommandService {\n  public addInstanceCommand = (\n    command: AddInstanceCommand\n  ): Promise<AddInstanceCommandResponse> =>\n    this.command('AddInstanceCommand', command);\n\n  public addLienDeliberationCommand = (\n    command: AddLienDeliberationCommand\n  ): Promise<AddLienDeliberationCommandResponse> =>\n    this.command('AddLienDeliberationCommand', command);\n\n  public addRepresentationCommand = (\n    command: AddRepresentationCommand\n  ): Promise<AddRepresentationCommandResponse> =>\n    this.command('AddRepresentationCommand', command);\n\n  public createDeliberationCommand = (\n    command: CreateDeliberationCommand\n  ): Promise<CreateDeliberationCommandResponse> =>\n    this.command('CreateDeliberationCommand', command);\n\n  public createNatureJuridiqueCommand = (\n    command: CreateNatureJuridiqueCommand\n  ): Promise<CreateNatureJuridiqueCommandResponse> =>\n    this.command('CreateNatureJuridiqueCommand', command);\n\n  public createOrganismeCommand = (\n    command: CreateOrganismeCommand\n  ): Promise<CreateOrganismeCommandResponse> =>\n    this.command('CreateOrganismeCommand', command);\n\n  public createRepresentantCommand = (\n    command: CreateRepresentantCommand\n  ): Promise<CreateRepresentantCommandResponse> =>\n    this.command('CreateRepresentantCommand', command);\n\n  public createSecteurCommand = (\n    command: CreateSecteurCommand\n  ): Promise<CreateSecteurCommandResponse> =>\n    this.command('CreateSecteurCommand', command);\n\n  public createTypeStructureCommand = (\n    command: CreateTypeStructureCommand\n  ): Promise<CreateTypeStructureCommandResponse> =>\n    this.command('CreateTypeStructureCommand', command);\n\n  public loginCommand = (\n    command: LoginCommand\n  ): Promise<LoginCommandResponse> => this.command('LoginCommand', command);\n\n  public moveRepresentationCommand = (\n    command: MoveRepresentationCommand\n  ): Promise<void> => this.command('MoveRepresentationCommand', command);\n\n  public registerCommand = (\n    command: RegisterCommand\n  ): Promise<RegisterCommandResponse> =>\n    this.command('RegisterCommand', command);\n\n  public updateInstanceNombreRepresentantsCommand = (\n    command: UpdateInstanceNombreRepresentantsCommand\n  ): Promise<void> =>\n    this.command('UpdateInstanceNombreRepresentantsCommand', command);\n\n  public updateInstanceNomCommand = (\n    command: UpdateInstanceNomCommand\n  ): Promise<void> => this.command('UpdateInstanceNomCommand', command);\n\n  public updateInstanceStatusCommand = (\n    command: UpdateInstanceStatusCommand\n  ): Promise<void> => this.command('UpdateInstanceStatusCommand', command);\n\n  public updateNatureJuridiqueLibelleCommand = (\n    command: UpdateNatureJuridiqueLibelleCommand\n  ): Promise<void> =>\n    this.command('UpdateNatureJuridiqueLibelleCommand', command);\n\n  public updateNatureJuridiqueStatusCommand = (\n    command: UpdateNatureJuridiqueStatusCommand\n  ): Promise<void> =>\n    this.command('UpdateNatureJuridiqueStatusCommand', command);\n\n  public updateOrganismeNatureJuridiqueCommand = (\n    command: UpdateOrganismeNatureJuridiqueCommand\n  ): Promise<void> =>\n    this.command('UpdateOrganismeNatureJuridiqueCommand', command);\n\n  public updateOrganismeNombreRepresentantsCommand = (\n    command: UpdateOrganismeNombreRepresentantsCommand\n  ): Promise<void> =>\n    this.command('UpdateOrganismeNombreRepresentantsCommand', command);\n\n  public updateOrganismeNomCommand = (\n    command: UpdateOrganismeNomCommand\n  ): Promise<void> => this.command('UpdateOrganismeNomCommand', command);\n\n  public updateOrganismePartageRepresentantsCommand = (\n    command: UpdateOrganismePartageRepresentantsCommand\n  ): Promise<void> =>\n    this.command('UpdateOrganismePartageRepresentantsCommand', command);\n\n  public updateOrganismeSecteurCommand = (\n    command: UpdateOrganismeSecteurCommand\n  ): Promise<void> => this.command('UpdateOrganismeSecteurCommand', command);\n\n  public updateOrganismeStatus = (\n    command: UpdateOrganismeStatus\n  ): Promise<void> => this.command('UpdateOrganismeStatus', command);\n\n  public updateOrganismeTypeStructureCommand = (\n    command: UpdateOrganismeTypeStructureCommand\n  ): Promise<void> =>\n    this.command('UpdateOrganismeTypeStructureCommand', command);\n\n  public updateRepresentationStatusCommand = (\n    command: UpdateRepresentationStatusCommand\n  ): Promise<void> =>\n    this.command('UpdateRepresentationStatusCommand', command);\n\n  public updateSecteurLibelleCommand = (\n    command: UpdateSecteurLibelleCommand\n  ): Promise<void> => this.command('UpdateSecteurLibelleCommand', command);\n\n  public updateSecteurStatusCommand = (\n    command: UpdateSecteurStatusCommand\n  ): Promise<void> => this.command('UpdateSecteurStatusCommand', command);\n\n  public updateTypeStructureLibelleCommand = (\n    command: UpdateTypeStructureLibelleCommand\n  ): Promise<void> =>\n    this.command('UpdateTypeStructureLibelleCommand', command);\n\n  public updateTypeStructureStatusCommand = (\n    command: UpdateTypeStructureStatusCommand\n  ): Promise<void> => this.command('UpdateTypeStructureStatusCommand', command);\n\n  private command = <R>(commandName: string, command?: object): Promise<R> =>\n    appContext\n      .httpService()\n      .post('/command', {\n        ...command,\n        objectType: commandName\n      })\n      .then(r => r.body);\n}\n","import { Errors } from '../errors';\nimport { getCookie } from '../utils';\n\nconst cookieName = 'XSRF-TOKEN';\n\nexport class CsrfTokenService {\n  public header = 'X-XSRF-TOKEN';\n  public inputName = '_csrf';\n  public token!: string;\n\n  constructor() {\n    this.refreshToken();\n  }\n\n  public refreshToken() {\n    const token = getCookie(cookieName);\n    if (!token) {\n      throw Errors._166ac42d();\n    }\n    this.token = token;\n  }\n}\n","import { appContext } from '../ApplicationContext';\nimport { RequestErrorId } from '../domain/ids';\nimport { Instant } from '../domain/time';\n\ntype RequestType = 'get' | 'post';\n\nexport const displayErrorMessage = 'DisplayError';\n\nexport interface HttpResponse {\n  status: number;\n  body?: any;\n}\n\nexport interface RequestError {\n  id?: RequestErrorId;\n  status: number;\n  error: string;\n  message: string;\n  instant: Instant;\n  stackTrace?: any;\n}\n\nexport class HttpService {\n  public credentials: RequestCredentials = 'same-origin';\n\n  public get = (url: string, getParams?: any) =>\n    this.fetchAndDeserialize('get', url, getParams);\n\n  public post = (url: string, bodyObject?: any) =>\n    this.fetchAndDeserialize('post', url, null, JSON.stringify(bodyObject));\n\n  public fetch(\n    requestType: RequestType,\n    url: string,\n    getParams?: any,\n    bodyAsString?: string\n  ): Promise<Response> {\n    const params: RequestInit = {\n      method: requestType,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        [appContext.csrfTokenService().header]:\n          appContext.csrfTokenService().token\n      },\n      credentials: this.credentials\n    };\n    if (bodyAsString) {\n      params.body = bodyAsString;\n    }\n    let finalUrl = url;\n    if (getParams) {\n      finalUrl += '?' + encodeURIComponent(JSON.stringify(getParams));\n    }\n    return fetch(finalUrl, params);\n  }\n\n  private fetchAndDeserialize(\n    requestType: RequestType,\n    url: string,\n    getParams?: any,\n    bodyAsString?: string\n  ): Promise<HttpResponse> {\n    return this.fetch(requestType, url, getParams, bodyAsString).then(\n      (response: Response) => {\n        if (response.ok) {\n          return response.text().then(t => ({\n            status: response.status,\n            body: t !== '' ? JSON.parse(t) : undefined\n          }));\n        } else {\n          return response.text().then(t => {\n            const error: RequestError = JSON.parse(t);\n            return Promise.reject(error);\n          });\n        }\n      }\n    );\n  }\n}\n","import { toast } from 'react-toastify';\n\nexport type NotificationLevel = 'warning' | 'info';\n\nexport class NotificationService {\n  public notifications = [] as [\n    string,\n    { message: string; level: NotificationLevel }\n  ][];\n\n  public displayNotification = (\n    message: string,\n    level: NotificationLevel = 'info'\n  ) => {\n    // TODO[error]\n    toast(message);\n  };\n}\n","import { appContext } from '../ApplicationContext';\nimport {\n  GetOrganismeQuery,\n  GetOrganismeQueryResponse,\n  IsLoginAlreadyTakenQuery,\n  IsLoginAlreadyTakenQueryResponse,\n  ListOrganismesBySecteurQuery,\n  ListOrganismesBySecteurQueryResponse,\n  ListOrganismesQueryResponse,\n  SearchDeliberationQuery,\n  SearchDeliberationQueryResponse,\n  SearchRepresentantsQuery,\n  SearchRepresentantsQueryResponse\n} from '../domain/queries';\n\nexport class QueryService {\n  public getOrganismeQuery = (\n    query: GetOrganismeQuery\n  ): Promise<GetOrganismeQueryResponse> =>\n    this.query('GetOrganismeQuery', query);\n\n  public isLoginAlreadyTakenQuery = (\n    query: IsLoginAlreadyTakenQuery\n  ): Promise<IsLoginAlreadyTakenQueryResponse> =>\n    this.query('IsLoginAlreadyTakenQuery', query);\n\n  public listOrganismesBySecteurQuery = (\n    query: ListOrganismesBySecteurQuery\n  ): Promise<ListOrganismesBySecteurQueryResponse> =>\n    this.query('ListOrganismesBySecteurQuery', query);\n\n  public listOrganismesQuery = (): Promise<ListOrganismesQueryResponse> =>\n    this.query('ListOrganismesQuery');\n\n  public searchDeliberationQuery = (\n    query: SearchDeliberationQuery\n  ): Promise<SearchDeliberationQueryResponse> =>\n    this.query('SearchDeliberationQuery', query);\n\n  public searchRepresentantsQuery = (\n    query: SearchRepresentantsQuery\n  ): Promise<SearchRepresentantsQueryResponse> =>\n    this.query('SearchRepresentantsQuery', query);\n\n  private query = <R>(queryName: string, query?: object): Promise<R> =>\n    appContext\n      .httpService()\n      .get('/query', {\n        ...query,\n        objectType: queryName\n      })\n      .then(r => r.body);\n}\n","import { ApplicationHistory } from './routing/ApplicationHistory';\nimport { CommandService } from './services/CommandService';\nimport { CsrfTokenService } from './services/CsrfTokenService';\nimport { HttpService } from './services/HttpService';\nimport { NotificationService } from './services/NotificationService';\nimport { QueryService } from './services/QueryService';\n\nclass ApplicationContext {\n  private csrfTokenServiceInstance?: CsrfTokenService;\n  public csrfTokenService = () => {\n    if (!this.csrfTokenServiceInstance) {\n      this.csrfTokenServiceInstance = new CsrfTokenService();\n    }\n    return this.csrfTokenServiceInstance;\n  };\n\n  private httpServiceInstance?: HttpService;\n  public httpService = () => {\n    if (!this.httpServiceInstance) {\n      this.httpServiceInstance = new HttpService();\n    }\n    return this.httpServiceInstance;\n  };\n\n  private notificationServiceInstance?: NotificationService;\n  public notificationService = () => {\n    if (!this.notificationServiceInstance) {\n      this.notificationServiceInstance = new NotificationService();\n    }\n    return this.notificationServiceInstance;\n  };\n\n  private applicationHistoryInstance?: ApplicationHistory;\n  public applicationHistory = () => {\n    if (!this.applicationHistoryInstance) {\n      this.applicationHistoryInstance = new ApplicationHistory();\n    }\n    return this.applicationHistoryInstance;\n  };\n\n  private queryServiceInstance?: QueryService;\n  public queryService = () => {\n    if (!this.queryServiceInstance) {\n      this.queryServiceInstance = new QueryService();\n    }\n    return this.queryServiceInstance;\n  };\n\n  private commandServiceInstance?: CommandService;\n  public commandService = () => {\n    if (!this.commandServiceInstance) {\n      this.commandServiceInstance = new CommandService();\n    }\n    return this.commandServiceInstance;\n  };\n}\n\nexport const appContext = new ApplicationContext();\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { fonts } from './vars';\n\nexport const globalStyles = css`\n  *,\n  *:before,\n  *:after {\n    position: relative;\n    box-sizing: border-box;\n  }\n\n  html,\n  body {\n    margin: 0;\n    // font-size: {fonts.baseSize}px;\n    font-family: ${fonts.font};\n  }\n\n  button {\n    outline: none !important;\n  }\n\n  h1 {\n    font-size: 1.6rem;\n    font-weight: normal;\n  }\n  h2 {\n    font-size: 1.5rem;\n    font-weight: normal;\n  }\n  h3 {\n    font-size: 1.4rem;\n    font-weight: normal;\n    margin: 10px 0;\n  }\n  h4 {\n    font-size: 1.3rem;\n    font-weight: normal;\n    text-align: center;\n    margin: 8px 0;\n  }\n`;\n","import { css } from '@emotion/react';\n\n// https://stackoverflow.com/questions/43186015/css-hide-scroll-bar-but-have-element-scrollable/43186311\nexport const cleanScrollBar = css`\n  // Chrome/Safari/Webkit\n  ::-webkit-scrollbar {\n    width: 0;\n    background: transparent;\n  }\n  // Firefox\n  scrollbar-width: none;\n  // IE 10+\n  -ms-overflow-style: none;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { PropsWithChildren, useEffect, useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport { cleanScrollBar } from '../common-classes';\n\n// [doc] https://usehooks.com/useWindowSize/\nexport const useWindowHeight = () => {\n  const [height, setHeight] = useState(0);\n\n  useEffect(() => {\n    const handleResize = () => setHeight(window.innerHeight);\n\n    window.addEventListener('resize', () => handleResize());\n\n    handleResize();\n\n    return () => window.removeEventListener('resize', handleResize);\n  });\n\n  return height;\n};\n\n// [doc] Root element sizing is done with javascript... because of mobile Chrome : indow.innerHeight changes when the\n// url bar is hiding or displayed, which especially provokes complex bugs with popups\n// See https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n// Tried with CSS :\n// height: 100%; (the starting point) => bug in popup below part when url bar hidden\n// height: 100vh; => fixes screen sizes without url bar, even if it's displayed... so scrolling is buggy\n// height: calc(100vh - 56px); => same behaviour than height 100%\n// height: calc(100% - 56px); => problematic too\n// min-height: -webkit-fill-available; => popup completely cut when bar hidden\n// cf onetab \"100vh\"\nexport const Root = (props: PropsWithChildren<{}>) => {\n  const height = useWindowHeight();\n  return (\n    <div\n      css={css`\n        position: absolute;\n        width: 100%;\n        height: ${height}px;\n        overflow: hidden;\n      `}\n    >\n      <ToastContainer />\n      <div\n        css={css`\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          overflow-y: scroll;\n          ${cleanScrollBar};\n        `}\n      >\n        {props.children}\n      </div>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { MainContainer } from '../container/MainContainer';\n\nexport const NotFoundView = () => (\n  <MainContainer>\n    <h1>404</h1>\n  </MainContainer>\n);\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { Route, Router, Switch } from 'react-router';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\nimport { useRecoilState } from 'recoil';\nimport { appContext } from '../ApplicationContext';\nimport { state } from '../state/state';\nimport { NotFoundView } from '../view/NotFoundView';\nimport { routes } from './routes';\n\nexport const ApplicationRouter = () => {\n  const [userInfos] = useRecoilState(state.userInfos);\n  return (\n    <Router history={appContext.applicationHistory().browserHistory}>\n      <Switch>\n        {Object.entries(routes).map(entry => {\n          const [k, r] = entry;\n          return (\n            <Route\n              key={r.path}\n              exact={true}\n              path={r.path}\n              render={(routerProps: RouteComponentProps<any>) => {\n                if (\n                  r.role &&\n                  (!userInfos || !userInfos.roles.includes(r.role))\n                ) {\n                  return (\n                    <Redirect\n                      to={{\n                        pathname: routes.RootRoute.path,\n                        state: { from: routerProps.location }\n                      }}\n                    />\n                  );\n                }\n                return React.createElement(r.component, {\n                  routeParams: {\n                    ...routerProps.match.params,\n                    name: k\n                  }\n                });\n              }}\n            />\n          );\n        })}\n        <Route exact={false} component={NotFoundView} />\n      </Switch>\n    </Router>\n  );\n};\n","// organize-imports-ignore\n/**\n * [doc] this file exists to control important imports order\n * auto prettier-plugin-organize-imports reordering is blocked by 'organize-imports-ignore'\n * polyfills must be loaded first in case of things done 'synchronously' in files\n */\nimport 'es6-promise/auto';\nimport 'es6-shim';\nimport 'es7-shim';\nimport 'whatwg-fetch';\nimport './application-bootstrap';\n","export const dimensions = {\n  screenSmMin: 768\n};\n\nexport const fonts = {\n  // baseSize: 8,\n  font: \"Arial, 'sans-serif'\"\n};\n\nexport const colors = {\n  clearGrey: '#eeeeee',\n  clearGrey2: '#f8f8f8',\n  dragableMoving: 'lightgreen',\n  dragHandlers: '#333333',\n  errorBackground: '#bd4641',\n  errorRed: '#cc0000',\n  grey: '#333333',\n  grey2: '#aaa',\n  lightblue: 'lightblue',\n  popupGlasspanel: 'rgba(220, 220, 220, 0.85)',\n  white: '#ffffff'\n};\n","export type NominalItem = NominalString<any> | NominalNumber<any> | string;\n\nexport abstract class NominalString<T extends string> {\n  private _typeGuard!: T;\n}\n\nexport abstract class NominalNumber<T extends string> {\n  private _typeGuard!: T;\n}\n\nexport const asString = (v: NominalString<any>) => v as unknown as string;\n\nexport const asNumber = (v: NominalNumber<any>) => v as unknown as string;\n\nexport const instanciateNominalString = <T extends NominalString<any>>(\n  value: string\n) => value as unknown as T;\n\nexport const instanciateNominalNumber = <T extends NominalNumber<any>>(\n  value: number\n) => value as unknown as T;\n\nexport class Dict<K extends NominalItem, T> {\n  private _typeGuardKey!: K;\n  private _typeGuardValue!: T;\n}\n\nexport const dict = <K extends NominalItem, T>(pairs: [K, T][] = []) => {\n  const d = {} as Dict<K, T>;\n  pairs.forEach(pair => {\n    // @ts-ignore\n    d[pair[0]] = pair[1];\n  });\n  return d;\n};\n\nexport const get = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  key: K\n): T | undefined =>\n  // @ts-ignore\n  dict[key];\n\nexport const getValue = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  key: K\n): T => {\n  const r = get(dict, key);\n  if (!r) {\n    throw new Error(`Could not find item ${key}`);\n  }\n  return r;\n};\n\nexport const set = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  key: K,\n  value: T\n): Dict<K, T> => {\n  const newDict = { ...dict } as Dict<K, T>;\n  // @ts-ignore\n  newDict[key] = value;\n  return newDict;\n};\n\nexport const setAll = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  pairs: [K, T][]\n): Dict<K, T> => {\n  const newDict = { ...dict } as Dict<K, T>;\n  pairs.forEach(pair => {\n    // @ts-ignore\n    d[pair[0]] = pair[1];\n  });\n  return newDict;\n};\n\nexport const setMutable = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  key: K,\n  value: T\n) => {\n  // @ts-ignore\n  dict[key] = value;\n};\n\nexport const dictKeys = <K extends NominalItem, T>(dict: Dict<K, T>) =>\n  Object.keys(dict) as unknown as K[];\n\nexport const dictValues = <K extends NominalItem, T>(dict: Dict<K, T>) =>\n  Object.values(dict) as T[];\n\nexport const dictEntries = <K extends NominalItem, T>(dict: Dict<K, T>) =>\n  Object.entries(dict) as unknown as [K, T][];\n\nexport const remove = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  ...keys: K[]\n): Dict<K, T> => {\n  const newDict = { ...dict } as Dict<K, T>;\n  keys.forEach(k => {\n    // @ts-ignore\n    delete newDict[k];\n  });\n  return newDict;\n};\n\nexport const mergeDicts = <K extends NominalItem, T>(\n  ...dicts: Dict<K, T>[]\n) => {\n  const d = dict<K, T>();\n  dicts.forEach(d => {\n    dictEntries(d).forEach(p => {\n      setMutable(d, p[0], p[1]);\n    });\n  });\n  return d;\n};\n\nexport const associateBy = <K extends NominalItem, T>(\n  a: T[],\n  key: (i: T) => K\n): Dict<K, T> => {\n  const d = dict<K, T>();\n  a.forEach(i => setMutable(d, key(i), i));\n  return d;\n};\n\nexport const groupBy = <K extends NominalItem, T>(\n  a: T[],\n  key: (i: T) => K\n): Dict<K, T[]> => {\n  const map = dict<K, T[]>();\n  a.forEach(item => {\n    const k = key(item);\n    const existing = get(map, k);\n    const list = existing ? existing : [];\n    if (!existing) {\n      setMutable(map, k, list);\n    }\n    list.push(item);\n  });\n  return map;\n};\n","import { ClientUid } from './domain/client-ids';\nimport { LocalDate } from './domain/time';\nimport { Errors } from './errors';\nimport { asString, instanciateNominalString } from './utils/nominal-class';\n\nexport function assertUnreachable(x: never): never {\n  throw new Error(`Expected unreachable code ! Value : \"${JSON.stringify(x)}\"`);\n}\n\nlet uniqueIdIndex = 0;\nexport const clientUid = () =>\n  instanciateNominalString<ClientUid>('ClientUid_' + uniqueIdIndex++);\n\nexport const getCookie = (cookieName: string) => {\n  const name = cookieName + '=';\n  const ca = document.cookie.split(';');\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) === ' ') c = c.substring(1);\n    if (c.indexOf(name) !== -1) return c.substring(name.length, c.length);\n  }\n  return undefined;\n};\n\nexport const compareByLocalDate =\n  <T>(l: (o: T) => LocalDate) =>\n  (o1: T, o2: T) =>\n    asString(l(o1)).localeCompare(asString(l(o2)));\n\nexport const compareByNumber =\n  <T>(l: (o: T) => number) =>\n  (o1: T, o2: T) => {\n    if (l(o1) > l(o2)) return 1;\n    else if (l(o1) < l(o2)) return -1;\n    else return 0;\n  };\n\n// TODO[naming] sort in name\n// usage : item.sort(compareByString(item => item.sortLabel))\nexport const compareByString =\n  <T>(l: (o: T) => string) =>\n  (o1: T, o2: T) =>\n    l(o1).localeCompare(l(o2));\n\nexport const defer = (action: () => void) => setTimeout(action, 0);\n\nexport const stringToLocalDate = (value: string): LocalDate | undefined => {\n  if (value === '') {\n    return undefined;\n  }\n  const parts = value.split('-');\n  if (parts.length !== 3) {\n    throw Errors._ff7e63f5();\n  }\n  return instanciateNominalString(value);\n};\n","import { atom, selector } from 'recoil';\nimport {\n  NatureJuridique,\n  Secteur,\n  TypeStructure\n} from '../domain/bootstrap-data';\nimport { NatureJuridiqueId, SecteurId, TypeStructureId } from '../domain/ids';\nimport { compareByString } from '../utils';\nimport { dict, Dict } from '../utils/nominal-class';\n\n// FIXME typer pour lisibilité du state partagé...\nexport const state = {\n  natureJuridiques: atom({\n    key: 'natureJuridiques',\n    default: bootstrapData.categories.natureJuridiques.sort(\n      compareByString(i => i.libelle)\n    )\n  }),\n  natureJuridiquesById: selector({\n    key: 'natureJuridiquesById',\n    get: ({ get }): Dict<NatureJuridiqueId, NatureJuridique> =>\n      dict(get(state.natureJuridiques).map(n => [n.id, n]))\n  }),\n  organismeCategories: atom({\n    key: 'organismeCategories',\n    default: bootstrapData.categories\n  }),\n  secteurs: atom({\n    key: 'secteurs',\n    default: bootstrapData.categories.secteurs.sort(\n      compareByString(i => i.libelle)\n    )\n  }),\n  secteursById: selector({\n    key: 'secteursById',\n    get: ({ get }): Dict<SecteurId, Secteur> =>\n      dict(get(state.secteurs).map(s => [s.id, s]))\n  }),\n  typeStructures: atom({\n    key: 'typeStructures',\n    default: bootstrapData.categories.typeStructures.sort(\n      compareByString(i => i.libelle)\n    )\n  }),\n  typeStructuresById: selector({\n    key: 'typeStructuresById',\n    get: ({ get }): Dict<TypeStructureId, TypeStructure> =>\n      dict(get(state.typeStructures).map(t => [t.id, t]))\n  }),\n  userInfos: atom({\n    key: 'userInfos',\n    default: bootstrapData.userInfos\n  })\n};\n","import { Global } from '@emotion/react';\nimport {\n  createTheme,\n  StyledEngineProvider,\n  ThemeProvider\n} from '@mui/material';\nimport StylesProvider from '@mui/styles/StylesProvider';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Router as ReactRouter } from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { RecoilRoot } from 'recoil';\nimport { appContext } from './ApplicationContext';\nimport { Root } from './container/Root';\nimport { ApplicationRouter } from './routing/ApplicationRouter';\nimport { globalStyles } from './styles/common-styles';\nimport './styles/ReactToastify-additional.css';\n\nglobal.log = (logged: any) => console.log(logged);\n\nconst muiTheme = createTheme({\n  typography: {\n    // fontSize: fonts.baseSize,\n    // htmlFontSize: fonts.baseSize\n  }\n});\nReactDOM.render(\n  <RecoilRoot>\n    <Global styles={[globalStyles]} />\n    <ReactRouter history={appContext.applicationHistory().browserHistory}>\n      <StylesProvider injectFirst>\n        <StyledEngineProvider injectFirst>\n          <ThemeProvider theme={muiTheme}>\n            <Root>\n              <ApplicationRouter />\n            </Root>\n          </ThemeProvider>\n        </StyledEngineProvider>\n      </StylesProvider>\n    </ReactRouter>\n  </RecoilRoot>,\n  document.getElementById('root')\n);\n","/** @jsxImportSource @emotion/react */\nimport styled from '@emotion/styled';\nimport * as React from 'react';\nimport { PropsWithChildren } from 'react';\nimport { Link } from 'react-router-dom';\nimport { appContext } from '../ApplicationContext';\nimport { EmotionStyles } from '../interfaces';\nimport { Route } from './routes';\n\ninterface Props {\n  route: Route;\n  forwardCss?: EmotionStyles;\n}\n\nexport const RouteLink = (props: PropsWithChildren<Props>) => {\n  const Styled = props.forwardCss ? styled(Link)(props.forwardCss) : Link;\n  return (\n    <Styled to={appContext.applicationHistory().buildPath(props.route)}>\n      {props.children}\n    </Styled>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@mui/material';\nimport * as React from 'react';\nimport { PureComponent } from 'react';\nimport { appContext } from '../ApplicationContext';\n\nconst logoutPath = '/logout';\n\nexport class LogoutForm extends PureComponent {\n  public logoutForm: HTMLFormElement | null = null;\n\n  // [doc] is here to prevent double submission\n  // is NOT state (should not trigger a render)\n  private isLoggingOut = false;\n\n  public logout = () => {\n    if (!this.isLoggingOut) {\n      this.isLoggingOut = true;\n      this.logoutForm!.submit();\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <form\n          ref={c => (this.logoutForm = c)}\n          method=\"post\"\n          action={logoutPath}\n        >\n          <input\n            type=\"hidden\"\n            name={appContext.csrfTokenService().inputName}\n            value={appContext.csrfTokenService().token}\n          />\n        </form>\n        <Button\n          onClick={this.logout}\n          size=\"small\"\n          css={css`\n            top: -4px;\n            height: 24px;\n            background-color: white;\n            font-size: 0.8rem;\n            padding: 0 10px;\n          `}\n        >\n          Se déconnecter\n        </Button>\n      </React.Fragment>\n    );\n  }\n}\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { LogoutForm } from '../form/LogoutForm';\nimport { RouteLink } from '../routing/RouteLink';\nimport { state } from '../state/state';\nimport { colors } from '../styles/vars';\n\nexport const Menu = () => {\n  const [userInfos] = useRecoilState(state.userInfos);\n  return (\n    <div\n      css={css`\n        display: flex;\n        justify-content: space-between;\n        width: 100%;\n        height: 36px;\n        padding: 10px 20px;\n        background: ${colors.grey};\n      `}\n    >\n      <RouteLink\n        forwardCss={css`\n          color: ${colors.white};\n          text-decoration: none;\n          text-transform: uppercase;\n        `}\n        route={{\n          name: 'RootRoute'\n        }}\n      >\n        Orgarif\n      </RouteLink>\n      <div\n        css={css`\n          display: flex;\n        `}\n      >\n        {userInfos && (\n          <div\n            css={css`\n              color: ${colors.white};\n              margin: 0 10px;\n            `}\n          >\n            {userInfos.mail}\n          </div>\n        )}\n        {userInfos && <LogoutForm />}\n        {!userInfos && (\n          <React.Fragment>\n            <RouteLink\n              forwardCss={css`\n                color: ${colors.white};\n                margin: 0 10px;\n              `}\n              route={{\n                name: 'LoginRoute'\n              }}\n            >\n              Identification\n            </RouteLink>\n            <RouteLink\n              forwardCss={css`\n                color: ${colors.white};\n                margin: 0 10px;\n              `}\n              route={{\n                name: 'RegisterRoute'\n              }}\n            >\n              Créer un compte\n            </RouteLink>\n          </React.Fragment>\n        )}\n      </div>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { PropsWithChildren } from 'react';\nimport { Menu } from './Menu';\n\nexport const MainContainer = (props: PropsWithChildren<{}>) => (\n  <div\n    css={css`\n      position: absolute;\n      display: flex;\n      height: 100%;\n      width: 100%;\n    `}\n  >\n    <div\n      css={css`\n        flex: 1;\n        overflow: scroll;\n      `}\n    >\n      <Menu />\n      <div\n        css={css`\n          margin: 10px;\n        `}\n      >\n        {props.children}\n      </div>\n    </div>\n  </div>\n);\n","export const Errors = {\n  _db434940: () => Error('db434940'),\n  _198c103e: () => Error('198c103e'),\n  _166ac42d: () => Error('166ac42d'),\n  _6f643a2a: () => Error('6f643a2a'),\n  _82c7652b: () => Error('82c7652b'),\n  _41dcf9d3: () => Error('41dcf9d3'),\n  _ff7e63f5: () => Error('ff7e63f5'),\n  _c0c89407: () => Error('c0c89407'),\n  _06c0f351: () => Error('06c0f351'),\n  _2c740dc6: () => Error('2c740dc6'),\n  _bf153d36: () => Error('bf153d36'),\n  _51237480: () => Error('51237480'),\n  _952f03ee: () => Error('952f03ee'),\n  _89de521f: () => Error('89de521f'),\n  _52b81c0f: () => Error('52b81c0f'),\n  _a5ef6b39: () => Error('a5ef6b39')\n};\n"],"sourceRoot":""}